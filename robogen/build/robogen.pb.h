// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robogen.proto

#ifndef PROTOBUF_INCLUDED_robogen_2eproto
#define PROTOBUF_INCLUDED_robogen_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto 

namespace protobuf_robogen_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_robogen_2eproto
namespace robogenMessage {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class BodyConnection;
class BodyConnectionDefaultTypeInternal;
extern BodyConnectionDefaultTypeInternal _BodyConnection_default_instance_;
class BodyPart;
class BodyPartDefaultTypeInternal;
extern BodyPartDefaultTypeInternal _BodyPart_default_instance_;
class Brain;
class BrainDefaultTypeInternal;
extern BrainDefaultTypeInternal _Brain_default_instance_;
class EvaluationRequest;
class EvaluationRequestDefaultTypeInternal;
extern EvaluationRequestDefaultTypeInternal _EvaluationRequest_default_instance_;
class EvaluationResult;
class EvaluationResultDefaultTypeInternal;
extern EvaluationResultDefaultTypeInternal _EvaluationResult_default_instance_;
class EvolvableParameter;
class EvolvableParameterDefaultTypeInternal;
extern EvolvableParameterDefaultTypeInternal _EvolvableParameter_default_instance_;
class LightSource;
class LightSourceDefaultTypeInternal;
extern LightSourceDefaultTypeInternal _LightSource_default_instance_;
class NeuralConnection;
class NeuralConnectionDefaultTypeInternal;
extern NeuralConnectionDefaultTypeInternal _NeuralConnection_default_instance_;
class Neuron;
class NeuronDefaultTypeInternal;
extern NeuronDefaultTypeInternal _Neuron_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class SimulatorConf;
class SimulatorConfDefaultTypeInternal;
extern SimulatorConfDefaultTypeInternal _SimulatorConf_default_instance_;
class StartPosition;
class StartPositionDefaultTypeInternal;
extern StartPositionDefaultTypeInternal _StartPosition_default_instance_;
}  // namespace robogenMessage
namespace google {
namespace protobuf {
template<> ::robogenMessage::Body* Arena::CreateMaybeMessage<::robogenMessage::Body>(Arena*);
template<> ::robogenMessage::BodyConnection* Arena::CreateMaybeMessage<::robogenMessage::BodyConnection>(Arena*);
template<> ::robogenMessage::BodyPart* Arena::CreateMaybeMessage<::robogenMessage::BodyPart>(Arena*);
template<> ::robogenMessage::Brain* Arena::CreateMaybeMessage<::robogenMessage::Brain>(Arena*);
template<> ::robogenMessage::EvaluationRequest* Arena::CreateMaybeMessage<::robogenMessage::EvaluationRequest>(Arena*);
template<> ::robogenMessage::EvaluationResult* Arena::CreateMaybeMessage<::robogenMessage::EvaluationResult>(Arena*);
template<> ::robogenMessage::EvolvableParameter* Arena::CreateMaybeMessage<::robogenMessage::EvolvableParameter>(Arena*);
template<> ::robogenMessage::LightSource* Arena::CreateMaybeMessage<::robogenMessage::LightSource>(Arena*);
template<> ::robogenMessage::NeuralConnection* Arena::CreateMaybeMessage<::robogenMessage::NeuralConnection>(Arena*);
template<> ::robogenMessage::Neuron* Arena::CreateMaybeMessage<::robogenMessage::Neuron>(Arena*);
template<> ::robogenMessage::Obstacle* Arena::CreateMaybeMessage<::robogenMessage::Obstacle>(Arena*);
template<> ::robogenMessage::Robot* Arena::CreateMaybeMessage<::robogenMessage::Robot>(Arena*);
template<> ::robogenMessage::SimulatorConf* Arena::CreateMaybeMessage<::robogenMessage::SimulatorConf>(Arena*);
template<> ::robogenMessage::StartPosition* Arena::CreateMaybeMessage<::robogenMessage::StartPosition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robogenMessage {

// ===================================================================

class EvolvableParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.EvolvableParameter) */ {
 public:
  EvolvableParameter();
  virtual ~EvolvableParameter();

  EvolvableParameter(const EvolvableParameter& from);

  inline EvolvableParameter& operator=(const EvolvableParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EvolvableParameter(EvolvableParameter&& from) noexcept
    : EvolvableParameter() {
    *this = ::std::move(from);
  }

  inline EvolvableParameter& operator=(EvolvableParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvolvableParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvolvableParameter* internal_default_instance() {
    return reinterpret_cast<const EvolvableParameter*>(
               &_EvolvableParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EvolvableParameter* other);
  friend void swap(EvolvableParameter& a, EvolvableParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EvolvableParameter* New() const final {
    return CreateMaybeMessage<EvolvableParameter>(NULL);
  }

  EvolvableParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EvolvableParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EvolvableParameter& from);
  void MergeFrom(const EvolvableParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvolvableParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float paramValue = 1;
  bool has_paramvalue() const;
  void clear_paramvalue();
  static const int kParamValueFieldNumber = 1;
  float paramvalue() const;
  void set_paramvalue(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.EvolvableParameter)
 private:
  void set_has_paramvalue();
  void clear_has_paramvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float paramvalue_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BodyPart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.BodyPart) */ {
 public:
  BodyPart();
  virtual ~BodyPart();

  BodyPart(const BodyPart& from);

  inline BodyPart& operator=(const BodyPart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BodyPart(BodyPart&& from) noexcept
    : BodyPart() {
    *this = ::std::move(from);
  }

  inline BodyPart& operator=(BodyPart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyPart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyPart* internal_default_instance() {
    return reinterpret_cast<const BodyPart*>(
               &_BodyPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BodyPart* other);
  friend void swap(BodyPart& a, BodyPart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BodyPart* New() const final {
    return CreateMaybeMessage<BodyPart>(NULL);
  }

  BodyPart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BodyPart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BodyPart& from);
  void MergeFrom(const BodyPart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyPart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  int evolvableparam_size() const;
  void clear_evolvableparam();
  static const int kEvolvableParamFieldNumber = 4;
  ::robogenMessage::EvolvableParameter* mutable_evolvableparam(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >*
      mutable_evolvableparam();
  const ::robogenMessage::EvolvableParameter& evolvableparam(int index) const;
  ::robogenMessage::EvolvableParameter* add_evolvableparam();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >&
      evolvableparam() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required bool root = 3;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 3;
  bool root() const;
  void set_root(bool value);

  // required int32 orientation = 5;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 5;
  ::google::protobuf::int32 orientation() const;
  void set_orientation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:robogenMessage.BodyPart)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_root();
  void clear_has_root();
  void set_has_orientation();
  void clear_has_orientation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter > evolvableparam_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  bool root_;
  ::google::protobuf::int32 orientation_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BodyConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.BodyConnection) */ {
 public:
  BodyConnection();
  virtual ~BodyConnection();

  BodyConnection(const BodyConnection& from);

  inline BodyConnection& operator=(const BodyConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BodyConnection(BodyConnection&& from) noexcept
    : BodyConnection() {
    *this = ::std::move(from);
  }

  inline BodyConnection& operator=(BodyConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyConnection* internal_default_instance() {
    return reinterpret_cast<const BodyConnection*>(
               &_BodyConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BodyConnection* other);
  friend void swap(BodyConnection& a, BodyConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BodyConnection* New() const final {
    return CreateMaybeMessage<BodyConnection>(NULL);
  }

  BodyConnection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BodyConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BodyConnection& from);
  void MergeFrom(const BodyConnection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // required string dest = 2;
  bool has_dest() const;
  void clear_dest();
  static const int kDestFieldNumber = 2;
  const ::std::string& dest() const;
  void set_dest(const ::std::string& value);
  #if LANG_CXX11
  void set_dest(::std::string&& value);
  #endif
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  ::std::string* mutable_dest();
  ::std::string* release_dest();
  void set_allocated_dest(::std::string* dest);

  // required int32 srcSlot = 3;
  bool has_srcslot() const;
  void clear_srcslot();
  static const int kSrcSlotFieldNumber = 3;
  ::google::protobuf::int32 srcslot() const;
  void set_srcslot(::google::protobuf::int32 value);

  // required int32 destSlot = 4;
  bool has_destslot() const;
  void clear_destslot();
  static const int kDestSlotFieldNumber = 4;
  ::google::protobuf::int32 destslot() const;
  void set_destslot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:robogenMessage.BodyConnection)
 private:
  void set_has_src();
  void clear_has_src();
  void set_has_dest();
  void clear_has_dest();
  void set_has_srcslot();
  void clear_has_srcslot();
  void set_has_destslot();
  void clear_has_destslot();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  ::google::protobuf::internal::ArenaStringPtr dest_;
  ::google::protobuf::int32 srcslot_;
  ::google::protobuf::int32 destslot_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Body* other);
  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(NULL);
  }

  Body* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robogenMessage.BodyPart part = 1;
  int part_size() const;
  void clear_part();
  static const int kPartFieldNumber = 1;
  ::robogenMessage::BodyPart* mutable_part(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >*
      mutable_part();
  const ::robogenMessage::BodyPart& part(int index) const;
  ::robogenMessage::BodyPart* add_part();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >&
      part() const;

  // repeated .robogenMessage.BodyConnection connection = 2;
  int connection_size() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 2;
  ::robogenMessage::BodyConnection* mutable_connection(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >*
      mutable_connection();
  const ::robogenMessage::BodyConnection& connection(int index) const;
  ::robogenMessage::BodyConnection* add_connection();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >&
      connection() const;

  // @@protoc_insertion_point(class_scope:robogenMessage.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart > part_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection > connection_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NeuralConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.NeuralConnection) */ {
 public:
  NeuralConnection();
  virtual ~NeuralConnection();

  NeuralConnection(const NeuralConnection& from);

  inline NeuralConnection& operator=(const NeuralConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NeuralConnection(NeuralConnection&& from) noexcept
    : NeuralConnection() {
    *this = ::std::move(from);
  }

  inline NeuralConnection& operator=(NeuralConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeuralConnection* internal_default_instance() {
    return reinterpret_cast<const NeuralConnection*>(
               &_NeuralConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NeuralConnection* other);
  friend void swap(NeuralConnection& a, NeuralConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NeuralConnection* New() const final {
    return CreateMaybeMessage<NeuralConnection>(NULL);
  }

  NeuralConnection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NeuralConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NeuralConnection& from);
  void MergeFrom(const NeuralConnection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // required string dest = 2;
  bool has_dest() const;
  void clear_dest();
  static const int kDestFieldNumber = 2;
  const ::std::string& dest() const;
  void set_dest(const ::std::string& value);
  #if LANG_CXX11
  void set_dest(::std::string&& value);
  #endif
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  ::std::string* mutable_dest();
  ::std::string* release_dest();
  void set_allocated_dest(::std::string* dest);

  // required float weight = 3;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.NeuralConnection)
 private:
  void set_has_src();
  void clear_has_src();
  void set_has_dest();
  void clear_has_dest();
  void set_has_weight();
  void clear_has_weight();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  ::google::protobuf::internal::ArenaStringPtr dest_;
  float weight_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Neuron : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.Neuron) */ {
 public:
  Neuron();
  virtual ~Neuron();

  Neuron(const Neuron& from);

  inline Neuron& operator=(const Neuron& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Neuron(Neuron&& from) noexcept
    : Neuron() {
    *this = ::std::move(from);
  }

  inline Neuron& operator=(Neuron&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Neuron& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neuron* internal_default_instance() {
    return reinterpret_cast<const Neuron*>(
               &_Neuron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Neuron* other);
  friend void swap(Neuron& a, Neuron& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Neuron* New() const final {
    return CreateMaybeMessage<Neuron>(NULL);
  }

  Neuron* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Neuron>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Neuron& from);
  void MergeFrom(const Neuron& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neuron* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string layer = 2;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_layer(::std::string&& value);
  #endif
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // required string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string bodyPartId = 5;
  bool has_bodypartid() const;
  void clear_bodypartid();
  static const int kBodyPartIdFieldNumber = 5;
  const ::std::string& bodypartid() const;
  void set_bodypartid(const ::std::string& value);
  #if LANG_CXX11
  void set_bodypartid(::std::string&& value);
  #endif
  void set_bodypartid(const char* value);
  void set_bodypartid(const char* value, size_t size);
  ::std::string* mutable_bodypartid();
  ::std::string* release_bodypartid();
  void set_allocated_bodypartid(::std::string* bodypartid);

  // optional float bias = 4;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 4;
  float bias() const;
  void set_bias(float value);

  // optional int32 ioId = 6;
  bool has_ioid() const;
  void clear_ioid();
  static const int kIoIdFieldNumber = 6;
  ::google::protobuf::int32 ioid() const;
  void set_ioid(::google::protobuf::int32 value);

  // optional float tau = 7;
  bool has_tau() const;
  void clear_tau();
  static const int kTauFieldNumber = 7;
  float tau() const;
  void set_tau(float value);

  // optional float phaseOffset = 8;
  bool has_phaseoffset() const;
  void clear_phaseoffset();
  static const int kPhaseOffsetFieldNumber = 8;
  float phaseoffset() const;
  void set_phaseoffset(float value);

  // optional float period = 9;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 9;
  float period() const;
  void set_period(float value);

  // optional float gain = 10;
  bool has_gain() const;
  void clear_gain();
  static const int kGainFieldNumber = 10;
  float gain() const;
  void set_gain(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.Neuron)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_layer();
  void clear_has_layer();
  void set_has_type();
  void clear_has_type();
  void set_has_bias();
  void clear_has_bias();
  void set_has_bodypartid();
  void clear_has_bodypartid();
  void set_has_ioid();
  void clear_has_ioid();
  void set_has_tau();
  void clear_has_tau();
  void set_has_phaseoffset();
  void clear_has_phaseoffset();
  void set_has_period();
  void clear_has_period();
  void set_has_gain();
  void clear_has_gain();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr bodypartid_;
  float bias_;
  ::google::protobuf::int32 ioid_;
  float tau_;
  float phaseoffset_;
  float period_;
  float gain_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Brain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.Brain) */ {
 public:
  Brain();
  virtual ~Brain();

  Brain(const Brain& from);

  inline Brain& operator=(const Brain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Brain(Brain&& from) noexcept
    : Brain() {
    *this = ::std::move(from);
  }

  inline Brain& operator=(Brain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Brain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brain* internal_default_instance() {
    return reinterpret_cast<const Brain*>(
               &_Brain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Brain* other);
  friend void swap(Brain& a, Brain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Brain* New() const final {
    return CreateMaybeMessage<Brain>(NULL);
  }

  Brain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Brain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Brain& from);
  void MergeFrom(const Brain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robogenMessage.Neuron neuron = 1;
  int neuron_size() const;
  void clear_neuron();
  static const int kNeuronFieldNumber = 1;
  ::robogenMessage::Neuron* mutable_neuron(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >*
      mutable_neuron();
  const ::robogenMessage::Neuron& neuron(int index) const;
  ::robogenMessage::Neuron* add_neuron();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >&
      neuron() const;

  // repeated .robogenMessage.NeuralConnection connection = 2;
  int connection_size() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 2;
  ::robogenMessage::NeuralConnection* mutable_connection(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >*
      mutable_connection();
  const ::robogenMessage::NeuralConnection& connection(int index) const;
  ::robogenMessage::NeuralConnection* add_connection();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >&
      connection() const;

  // @@protoc_insertion_point(class_scope:robogenMessage.Brain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron > neuron_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection > connection_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Robot* other);
  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(NULL);
  }

  Robot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .robogenMessage.Body body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::robogenMessage::Body& _internal_body() const;
  public:
  const ::robogenMessage::Body& body() const;
  ::robogenMessage::Body* release_body();
  ::robogenMessage::Body* mutable_body();
  void set_allocated_body(::robogenMessage::Body* body);

  // required .robogenMessage.Brain brain = 3;
  bool has_brain() const;
  void clear_brain();
  static const int kBrainFieldNumber = 3;
  private:
  const ::robogenMessage::Brain& _internal_brain() const;
  public:
  const ::robogenMessage::Brain& brain() const;
  ::robogenMessage::Brain* release_brain();
  ::robogenMessage::Brain* mutable_brain();
  void set_allocated_brain(::robogenMessage::Brain* brain);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

    // CH added this
  void set_complexity(float value);
  // CH added this
  float get_complexity() const;
  void set_complexity_cost(float value);
  float get_complexity_cost() const;

  // @@protoc_insertion_point(class_scope:robogenMessage.Robot)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_body();
  void clear_has_body();
  void set_has_brain();
  void clear_has_brain();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::robogenMessage::Body* body_;
  ::robogenMessage::Brain* brain_;
  ::google::protobuf::int32 id_;
  float complexity_;
  float complexityCost_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Obstacle* other);
  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(NULL);
  }

  Obstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // required float xSize = 4;
  bool has_xsize() const;
  void clear_xsize();
  static const int kXSizeFieldNumber = 4;
  float xsize() const;
  void set_xsize(float value);

  // required float ySize = 5;
  bool has_ysize() const;
  void clear_ysize();
  static const int kYSizeFieldNumber = 5;
  float ysize() const;
  void set_ysize(float value);

  // required float zSize = 6;
  bool has_zsize() const;
  void clear_zsize();
  static const int kZSizeFieldNumber = 6;
  float zsize() const;
  void set_zsize(float value);

  // required float density = 7;
  bool has_density() const;
  void clear_density();
  static const int kDensityFieldNumber = 7;
  float density() const;
  void set_density(float value);

  // required float xRotation = 8;
  bool has_xrotation() const;
  void clear_xrotation();
  static const int kXRotationFieldNumber = 8;
  float xrotation() const;
  void set_xrotation(float value);

  // required float yRotation = 9;
  bool has_yrotation() const;
  void clear_yrotation();
  static const int kYRotationFieldNumber = 9;
  float yrotation() const;
  void set_yrotation(float value);

  // required float zRotation = 10;
  bool has_zrotation() const;
  void clear_zrotation();
  static const int kZRotationFieldNumber = 10;
  float zrotation() const;
  void set_zrotation(float value);

  // required float rotationAngle = 11;
  bool has_rotationangle() const;
  void clear_rotationangle();
  static const int kRotationAngleFieldNumber = 11;
  float rotationangle() const;
  void set_rotationangle(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.Obstacle)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_xsize();
  void clear_has_xsize();
  void set_has_ysize();
  void clear_has_ysize();
  void set_has_zsize();
  void clear_has_zsize();
  void set_has_density();
  void clear_has_density();
  void set_has_xrotation();
  void clear_has_xrotation();
  void set_has_yrotation();
  void clear_has_yrotation();
  void set_has_zrotation();
  void clear_has_zrotation();
  void set_has_rotationangle();
  void clear_has_rotationangle();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float xsize_;
  float ysize_;
  float zsize_;
  float density_;
  float xrotation_;
  float yrotation_;
  float zrotation_;
  float rotationangle_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.LightSource) */ {
 public:
  LightSource();
  virtual ~LightSource();

  LightSource(const LightSource& from);

  inline LightSource& operator=(const LightSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightSource(LightSource&& from) noexcept
    : LightSource() {
    *this = ::std::move(from);
  }

  inline LightSource& operator=(LightSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightSource* internal_default_instance() {
    return reinterpret_cast<const LightSource*>(
               &_LightSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LightSource* other);
  friend void swap(LightSource& a, LightSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightSource* New() const final {
    return CreateMaybeMessage<LightSource>(NULL);
  }

  LightSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightSource& from);
  void MergeFrom(const LightSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // required float intensity = 7;
  bool has_intensity() const;
  void clear_intensity();
  static const int kIntensityFieldNumber = 7;
  float intensity() const;
  void set_intensity(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.LightSource)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_intensity();
  void clear_has_intensity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float intensity_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.StartPosition) */ {
 public:
  StartPosition();
  virtual ~StartPosition();

  StartPosition(const StartPosition& from);

  inline StartPosition& operator=(const StartPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartPosition(StartPosition&& from) noexcept
    : StartPosition() {
    *this = ::std::move(from);
  }

  inline StartPosition& operator=(StartPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartPosition* internal_default_instance() {
    return reinterpret_cast<const StartPosition*>(
               &_StartPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StartPosition* other);
  friend void swap(StartPosition& a, StartPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartPosition* New() const final {
    return CreateMaybeMessage<StartPosition>(NULL);
  }

  StartPosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartPosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartPosition& from);
  void MergeFrom(const StartPosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float azimuth = 3;
  bool has_azimuth() const;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 3;
  float azimuth() const;
  void set_azimuth(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.StartPosition)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_azimuth();
  void clear_has_azimuth();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float azimuth_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimulatorConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.SimulatorConf) */ {
 public:
  SimulatorConf();
  virtual ~SimulatorConf();

  SimulatorConf(const SimulatorConf& from);

  inline SimulatorConf& operator=(const SimulatorConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimulatorConf(SimulatorConf&& from) noexcept
    : SimulatorConf() {
    *this = ::std::move(from);
  }

  inline SimulatorConf& operator=(SimulatorConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulatorConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorConf* internal_default_instance() {
    return reinterpret_cast<const SimulatorConf*>(
               &_SimulatorConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SimulatorConf* other);
  friend void swap(SimulatorConf& a, SimulatorConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulatorConf* New() const final {
    return CreateMaybeMessage<SimulatorConf>(NULL);
  }

  SimulatorConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimulatorConf& from);
  void MergeFrom(const SimulatorConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robogenMessage.Obstacle obstacles = 3;
  int obstacles_size() const;
  void clear_obstacles();
  static const int kObstaclesFieldNumber = 3;
  ::robogenMessage::Obstacle* mutable_obstacles(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >*
      mutable_obstacles();
  const ::robogenMessage::Obstacle& obstacles(int index) const;
  ::robogenMessage::Obstacle* add_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >&
      obstacles() const;

  // repeated .robogenMessage.LightSource lightSources = 5;
  int lightsources_size() const;
  void clear_lightsources();
  static const int kLightSourcesFieldNumber = 5;
  ::robogenMessage::LightSource* mutable_lightsources(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource >*
      mutable_lightsources();
  const ::robogenMessage::LightSource& lightsources(int index) const;
  ::robogenMessage::LightSource* add_lightsources();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource >&
      lightsources() const;

  // repeated .robogenMessage.StartPosition startPositions = 8;
  int startpositions_size() const;
  void clear_startpositions();
  static const int kStartPositionsFieldNumber = 8;
  ::robogenMessage::StartPosition* mutable_startpositions(int index);
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >*
      mutable_startpositions();
  const ::robogenMessage::StartPosition& startpositions(int index) const;
  ::robogenMessage::StartPosition* add_startpositions();
  const ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >&
      startpositions() const;

  // required string scenario = 4;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 4;
  const ::std::string& scenario() const;
  void set_scenario(const ::std::string& value);
  #if LANG_CXX11
  void set_scenario(::std::string&& value);
  #endif
  void set_scenario(const char* value);
  void set_scenario(const char* value, size_t size);
  ::std::string* mutable_scenario();
  ::std::string* release_scenario();
  void set_allocated_scenario(::std::string* scenario);

  // required string terrainHeightFieldFileName = 22;
  bool has_terrainheightfieldfilename() const;
  void clear_terrainheightfieldfilename();
  static const int kTerrainHeightFieldFileNameFieldNumber = 22;
  const ::std::string& terrainheightfieldfilename() const;
  void set_terrainheightfieldfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_terrainheightfieldfilename(::std::string&& value);
  #endif
  void set_terrainheightfieldfilename(const char* value);
  void set_terrainheightfieldfilename(const char* value, size_t size);
  ::std::string* mutable_terrainheightfieldfilename();
  ::std::string* release_terrainheightfieldfilename();
  void set_allocated_terrainheightfieldfilename(::std::string* terrainheightfieldfilename);

  // required float terrainWidth = 1;
  bool has_terrainwidth() const;
  void clear_terrainwidth();
  static const int kTerrainWidthFieldNumber = 1;
  float terrainwidth() const;
  void set_terrainwidth(float value);

  // required float terrainLength = 2;
  bool has_terrainlength() const;
  void clear_terrainlength();
  static const int kTerrainLengthFieldNumber = 2;
  float terrainlength() const;
  void set_terrainlength(float value);

  // required float timeStep = 6;
  bool has_timestep() const;
  void clear_timestep();
  static const int kTimeStepFieldNumber = 6;
  float timestep() const;
  void set_timestep(float value);

  // required int32 nTimeSteps = 7;
  bool has_ntimesteps() const;
  void clear_ntimesteps();
  static const int kNTimeStepsFieldNumber = 7;
  ::google::protobuf::int32 ntimesteps() const;
  void set_ntimesteps(::google::protobuf::int32 value);

  // required int32 actuationPeriod = 9;
  bool has_actuationperiod() const;
  void clear_actuationperiod();
  static const int kActuationPeriodFieldNumber = 9;
  ::google::protobuf::int32 actuationperiod() const;
  void set_actuationperiod(::google::protobuf::int32 value);

  // required float terrainFriction = 10;
  bool has_terrainfriction() const;
  void clear_terrainfriction();
  static const int kTerrainFrictionFieldNumber = 10;
  float terrainfriction() const;
  void set_terrainfriction(float value);

  // required float sensorNoiseLevel = 11;
  bool has_sensornoiselevel() const;
  void clear_sensornoiselevel();
  static const int kSensorNoiseLevelFieldNumber = 11;
  float sensornoiselevel() const;
  void set_sensornoiselevel(float value);

  // required float motorNoiseLevel = 12;
  bool has_motornoiselevel() const;
  void clear_motornoiselevel();
  static const int kMotorNoiseLevelFieldNumber = 12;
  float motornoiselevel() const;
  void set_motornoiselevel(float value);

  // required float maxLinearAcceleration = 14;
  bool has_maxlinearacceleration() const;
  void clear_maxlinearacceleration();
  static const int kMaxLinearAccelerationFieldNumber = 14;
  float maxlinearacceleration() const;
  void set_maxlinearacceleration(float value);

  // required float maxAngularAcceleration = 15;
  bool has_maxangularacceleration() const;
  void clear_maxangularacceleration();
  static const int kMaxAngularAccelerationFieldNumber = 15;
  float maxangularacceleration() const;
  void set_maxangularacceleration(float value);

  // required int32 maxDirectionShiftsPerSecond = 16;
  bool has_maxdirectionshiftspersecond() const;
  void clear_maxdirectionshiftspersecond();
  static const int kMaxDirectionShiftsPerSecondFieldNumber = 16;
  ::google::protobuf::int32 maxdirectionshiftspersecond() const;
  void set_maxdirectionshiftspersecond(::google::protobuf::int32 value);

  // required float gravityX = 17;
  bool has_gravityx() const;
  void clear_gravityx();
  static const int kGravityXFieldNumber = 17;
  float gravityx() const;
  void set_gravityx(float value);

  // required float gravityY = 18;
  bool has_gravityy() const;
  void clear_gravityy();
  static const int kGravityYFieldNumber = 18;
  float gravityy() const;
  void set_gravityy(float value);

  // required bool capAcceleration = 13;
  bool has_capacceleration() const;
  void clear_capacceleration();
  static const int kCapAccelerationFieldNumber = 13;
  bool capacceleration() const;
  void set_capacceleration(bool value);

  // required bool disallowObstacleCollisions = 23;
  bool has_disallowobstaclecollisions() const;
  void clear_disallowobstaclecollisions();
  static const int kDisallowObstacleCollisionsFieldNumber = 23;
  bool disallowobstaclecollisions() const;
  void set_disallowobstaclecollisions(bool value);

  // required float gravityZ = 19;
  bool has_gravityz() const;
  void clear_gravityz();
  static const int kGravityZFieldNumber = 19;
  float gravityz() const;
  void set_gravityz(float value);

  // required int32 terrainType = 20;
  bool has_terraintype() const;
  void clear_terraintype();
  static const int kTerrainTypeFieldNumber = 20;
  ::google::protobuf::int32 terraintype() const;
  void set_terraintype(::google::protobuf::int32 value);

  // required float terrainHeight = 21;
  bool has_terrainheight() const;
  void clear_terrainheight();
  static const int kTerrainHeightFieldNumber = 21;
  float terrainheight() const;
  void set_terrainheight(float value);

  // required uint32 obstacleOverlapPolicy = 24;
  bool has_obstacleoverlappolicy() const;
  void clear_obstacleoverlappolicy();
  static const int kObstacleOverlapPolicyFieldNumber = 24;
  ::google::protobuf::uint32 obstacleoverlappolicy() const;
  void set_obstacleoverlappolicy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robogenMessage.SimulatorConf)
 private:
  void set_has_terrainwidth();
  void clear_has_terrainwidth();
  void set_has_terrainlength();
  void clear_has_terrainlength();
  void set_has_scenario();
  void clear_has_scenario();
  void set_has_timestep();
  void clear_has_timestep();
  void set_has_ntimesteps();
  void clear_has_ntimesteps();
  void set_has_actuationperiod();
  void clear_has_actuationperiod();
  void set_has_terrainfriction();
  void clear_has_terrainfriction();
  void set_has_sensornoiselevel();
  void clear_has_sensornoiselevel();
  void set_has_motornoiselevel();
  void clear_has_motornoiselevel();
  void set_has_capacceleration();
  void clear_has_capacceleration();
  void set_has_maxlinearacceleration();
  void clear_has_maxlinearacceleration();
  void set_has_maxangularacceleration();
  void clear_has_maxangularacceleration();
  void set_has_maxdirectionshiftspersecond();
  void clear_has_maxdirectionshiftspersecond();
  void set_has_gravityx();
  void clear_has_gravityx();
  void set_has_gravityy();
  void clear_has_gravityy();
  void set_has_gravityz();
  void clear_has_gravityz();
  void set_has_terraintype();
  void clear_has_terraintype();
  void set_has_terrainheight();
  void clear_has_terrainheight();
  void set_has_terrainheightfieldfilename();
  void clear_has_terrainheightfieldfilename();
  void set_has_disallowobstaclecollisions();
  void clear_has_disallowobstaclecollisions();
  void set_has_obstacleoverlappolicy();
  void clear_has_obstacleoverlappolicy();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle > obstacles_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource > lightsources_;
  ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition > startpositions_;
  ::google::protobuf::internal::ArenaStringPtr scenario_;
  ::google::protobuf::internal::ArenaStringPtr terrainheightfieldfilename_;
  float terrainwidth_;
  float terrainlength_;
  float timestep_;
  ::google::protobuf::int32 ntimesteps_;
  ::google::protobuf::int32 actuationperiod_;
  float terrainfriction_;
  float sensornoiselevel_;
  float motornoiselevel_;
  float maxlinearacceleration_;
  float maxangularacceleration_;
  ::google::protobuf::int32 maxdirectionshiftspersecond_;
  float gravityx_;
  float gravityy_;
  bool capacceleration_;
  bool disallowobstaclecollisions_;
  float gravityz_;
  ::google::protobuf::int32 terraintype_;
  float terrainheight_;
  ::google::protobuf::uint32 obstacleoverlappolicy_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EvaluationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.EvaluationRequest) */ {
 public:
  EvaluationRequest();
  virtual ~EvaluationRequest();

  EvaluationRequest(const EvaluationRequest& from);

  inline EvaluationRequest& operator=(const EvaluationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EvaluationRequest(EvaluationRequest&& from) noexcept
    : EvaluationRequest() {
    *this = ::std::move(from);
  }

  inline EvaluationRequest& operator=(EvaluationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvaluationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvaluationRequest* internal_default_instance() {
    return reinterpret_cast<const EvaluationRequest*>(
               &_EvaluationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(EvaluationRequest* other);
  friend void swap(EvaluationRequest& a, EvaluationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EvaluationRequest* New() const final {
    return CreateMaybeMessage<EvaluationRequest>(NULL);
  }

  EvaluationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EvaluationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EvaluationRequest& from);
  void MergeFrom(const EvaluationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvaluationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .robogenMessage.Robot robot = 1;
  bool has_robot() const;
  void clear_robot();
  static const int kRobotFieldNumber = 1;
  private:
  const ::robogenMessage::Robot& _internal_robot() const;
  public:
  const ::robogenMessage::Robot& robot() const;
  ::robogenMessage::Robot* release_robot();
  ::robogenMessage::Robot* mutable_robot();
  void set_allocated_robot(::robogenMessage::Robot* robot);

  // required .robogenMessage.SimulatorConf configuration = 2;
  bool has_configuration() const;
  void clear_configuration();
  static const int kConfigurationFieldNumber = 2;
  private:
  const ::robogenMessage::SimulatorConf& _internal_configuration() const;
  public:
  const ::robogenMessage::SimulatorConf& configuration() const;
  ::robogenMessage::SimulatorConf* release_configuration();
  ::robogenMessage::SimulatorConf* mutable_configuration();
  void set_allocated_configuration(::robogenMessage::SimulatorConf* configuration);

  // @@protoc_insertion_point(class_scope:robogenMessage.EvaluationRequest)
 private:
  void set_has_robot();
  void clear_has_robot();
  void set_has_configuration();
  void clear_has_configuration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::robogenMessage::Robot* robot_;
  ::robogenMessage::SimulatorConf* configuration_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EvaluationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robogenMessage.EvaluationResult) */ {
 public:
  EvaluationResult();
  virtual ~EvaluationResult();

  EvaluationResult(const EvaluationResult& from);

  inline EvaluationResult& operator=(const EvaluationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EvaluationResult(EvaluationResult&& from) noexcept
    : EvaluationResult() {
    *this = ::std::move(from);
  }

  inline EvaluationResult& operator=(EvaluationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvaluationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvaluationResult* internal_default_instance() {
    return reinterpret_cast<const EvaluationResult*>(
               &_EvaluationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(EvaluationResult* other);
  friend void swap(EvaluationResult& a, EvaluationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EvaluationResult* New() const final {
    return CreateMaybeMessage<EvaluationResult>(NULL);
  }

  EvaluationResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EvaluationResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EvaluationResult& from);
  void MergeFrom(const EvaluationResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvaluationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float objectives = 3;
  int objectives_size() const;
  void clear_objectives();
  static const int kObjectivesFieldNumber = 3;
  float objectives(int index) const;
  void set_objectives(int index, float value);
  void add_objectives(float value);
  const ::google::protobuf::RepeatedField< float >&
      objectives() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_objectives();

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required float fitness = 2;
  bool has_fitness() const;
  void clear_fitness();
  static const int kFitnessFieldNumber = 2;
  float fitness() const;
  void set_fitness(float value);

  // @@protoc_insertion_point(class_scope:robogenMessage.EvaluationResult)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_fitness();
  void clear_has_fitness();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > objectives_;
  ::google::protobuf::int32 id_;
  float fitness_;
  friend struct ::protobuf_robogen_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EvolvableParameter

// required float paramValue = 1;
inline bool EvolvableParameter::has_paramvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvolvableParameter::set_has_paramvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvolvableParameter::clear_has_paramvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvolvableParameter::clear_paramvalue() {
  paramvalue_ = 0;
  clear_has_paramvalue();
}
inline float EvolvableParameter::paramvalue() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvolvableParameter.paramValue)
  return paramvalue_;
}
inline void EvolvableParameter::set_paramvalue(float value) {
  set_has_paramvalue();
  paramvalue_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvolvableParameter.paramValue)
}

// -------------------------------------------------------------------

// BodyPart

// required string id = 1;
inline bool BodyPart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyPart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyPart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyPart::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BodyPart::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.id)
  return id_.GetNoArena();
}
inline void BodyPart::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.id)
}
#if LANG_CXX11
inline void BodyPart::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.BodyPart.id)
}
#endif
inline void BodyPart::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyPart.id)
}
inline void BodyPart::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyPart.id)
}
inline ::std::string* BodyPart::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyPart.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BodyPart::release_id() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyPart.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BodyPart::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyPart.id)
}

// required string type = 2;
inline bool BodyPart::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyPart::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyPart::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyPart::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& BodyPart::type() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.type)
  return type_.GetNoArena();
}
inline void BodyPart::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.type)
}
#if LANG_CXX11
inline void BodyPart::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.BodyPart.type)
}
#endif
inline void BodyPart::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyPart.type)
}
inline void BodyPart::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyPart.type)
}
inline ::std::string* BodyPart::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyPart.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BodyPart::release_type() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyPart.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BodyPart::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyPart.type)
}

// required bool root = 3;
inline bool BodyPart::has_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyPart::set_has_root() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyPart::clear_has_root() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyPart::clear_root() {
  root_ = false;
  clear_has_root();
}
inline bool BodyPart::root() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.root)
  return root_;
}
inline void BodyPart::set_root(bool value) {
  set_has_root();
  root_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.root)
}

// repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
inline int BodyPart::evolvableparam_size() const {
  return evolvableparam_.size();
}
inline void BodyPart::clear_evolvableparam() {
  evolvableparam_.Clear();
}
inline ::robogenMessage::EvolvableParameter* BodyPart::mutable_evolvableparam(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >*
BodyPart::mutable_evolvableparam() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.BodyPart.evolvableParam)
  return &evolvableparam_;
}
inline const ::robogenMessage::EvolvableParameter& BodyPart::evolvableparam(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_.Get(index);
}
inline ::robogenMessage::EvolvableParameter* BodyPart::add_evolvableparam() {
  // @@protoc_insertion_point(field_add:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >&
BodyPart::evolvableparam() const {
  // @@protoc_insertion_point(field_list:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_;
}

// required int32 orientation = 5;
inline bool BodyPart::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyPart::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyPart::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyPart::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::google::protobuf::int32 BodyPart::orientation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.orientation)
  return orientation_;
}
inline void BodyPart::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.orientation)
}

// -------------------------------------------------------------------

// BodyConnection

// required string src = 1;
inline bool BodyConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyConnection::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src();
}
inline const ::std::string& BodyConnection::src() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.src)
  return src_.GetNoArena();
}
inline void BodyConnection::set_src(const ::std::string& value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.src)
}
#if LANG_CXX11
inline void BodyConnection::set_src(::std::string&& value) {
  set_has_src();
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.BodyConnection.src)
}
#endif
inline void BodyConnection::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyConnection.src)
}
inline void BodyConnection::set_src(const char* value, size_t size) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyConnection.src)
}
inline ::std::string* BodyConnection::mutable_src() {
  set_has_src();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyConnection.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BodyConnection::release_src() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyConnection.src)
  if (!has_src()) {
    return NULL;
  }
  clear_has_src();
  return src_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BodyConnection::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    set_has_src();
  } else {
    clear_has_src();
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyConnection.src)
}

// required string dest = 2;
inline bool BodyConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyConnection::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
inline const ::std::string& BodyConnection::dest() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.dest)
  return dest_.GetNoArena();
}
inline void BodyConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.dest)
}
#if LANG_CXX11
inline void BodyConnection::set_dest(::std::string&& value) {
  set_has_dest();
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.BodyConnection.dest)
}
#endif
inline void BodyConnection::set_dest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyConnection.dest)
}
inline void BodyConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyConnection.dest)
}
inline ::std::string* BodyConnection::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyConnection.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BodyConnection::release_dest() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyConnection.dest)
  if (!has_dest()) {
    return NULL;
  }
  clear_has_dest();
  return dest_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BodyConnection::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyConnection.dest)
}

// required int32 srcSlot = 3;
inline bool BodyConnection::has_srcslot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyConnection::set_has_srcslot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyConnection::clear_has_srcslot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyConnection::clear_srcslot() {
  srcslot_ = 0;
  clear_has_srcslot();
}
inline ::google::protobuf::int32 BodyConnection::srcslot() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.srcSlot)
  return srcslot_;
}
inline void BodyConnection::set_srcslot(::google::protobuf::int32 value) {
  set_has_srcslot();
  srcslot_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.srcSlot)
}

// required int32 destSlot = 4;
inline bool BodyConnection::has_destslot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyConnection::set_has_destslot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyConnection::clear_has_destslot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyConnection::clear_destslot() {
  destslot_ = 0;
  clear_has_destslot();
}
inline ::google::protobuf::int32 BodyConnection::destslot() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.destSlot)
  return destslot_;
}
inline void BodyConnection::set_destslot(::google::protobuf::int32 value) {
  set_has_destslot();
  destslot_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.destSlot)
}

// -------------------------------------------------------------------

// Body

// repeated .robogenMessage.BodyPart part = 1;
inline int Body::part_size() const {
  return part_.size();
}
inline void Body::clear_part() {
  part_.Clear();
}
inline ::robogenMessage::BodyPart* Body::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Body.part)
  return part_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >*
Body::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Body.part)
  return &part_;
}
inline const ::robogenMessage::BodyPart& Body::part(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Body.part)
  return part_.Get(index);
}
inline ::robogenMessage::BodyPart* Body::add_part() {
  // @@protoc_insertion_point(field_add:robogenMessage.Body.part)
  return part_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >&
Body::part() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Body.part)
  return part_;
}

// repeated .robogenMessage.BodyConnection connection = 2;
inline int Body::connection_size() const {
  return connection_.size();
}
inline void Body::clear_connection() {
  connection_.Clear();
}
inline ::robogenMessage::BodyConnection* Body::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Body.connection)
  return connection_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >*
Body::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Body.connection)
  return &connection_;
}
inline const ::robogenMessage::BodyConnection& Body::connection(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Body.connection)
  return connection_.Get(index);
}
inline ::robogenMessage::BodyConnection* Body::add_connection() {
  // @@protoc_insertion_point(field_add:robogenMessage.Body.connection)
  return connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >&
Body::connection() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Body.connection)
  return connection_;
}

// -------------------------------------------------------------------

// NeuralConnection

// required string src = 1;
inline bool NeuralConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralConnection::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src();
}
inline const ::std::string& NeuralConnection::src() const {
  // @@protoc_insertion_point(field_get:robogenMessage.NeuralConnection.src)
  return src_.GetNoArena();
}
inline void NeuralConnection::set_src(const ::std::string& value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.NeuralConnection.src)
}
#if LANG_CXX11
inline void NeuralConnection::set_src(::std::string&& value) {
  set_has_src();
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.NeuralConnection.src)
}
#endif
inline void NeuralConnection::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.NeuralConnection.src)
}
inline void NeuralConnection::set_src(const char* value, size_t size) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.NeuralConnection.src)
}
inline ::std::string* NeuralConnection::mutable_src() {
  set_has_src();
  // @@protoc_insertion_point(field_mutable:robogenMessage.NeuralConnection.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NeuralConnection::release_src() {
  // @@protoc_insertion_point(field_release:robogenMessage.NeuralConnection.src)
  if (!has_src()) {
    return NULL;
  }
  clear_has_src();
  return src_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NeuralConnection::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    set_has_src();
  } else {
    clear_has_src();
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.NeuralConnection.src)
}

// required string dest = 2;
inline bool NeuralConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralConnection::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
inline const ::std::string& NeuralConnection::dest() const {
  // @@protoc_insertion_point(field_get:robogenMessage.NeuralConnection.dest)
  return dest_.GetNoArena();
}
inline void NeuralConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.NeuralConnection.dest)
}
#if LANG_CXX11
inline void NeuralConnection::set_dest(::std::string&& value) {
  set_has_dest();
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.NeuralConnection.dest)
}
#endif
inline void NeuralConnection::set_dest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.NeuralConnection.dest)
}
inline void NeuralConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.NeuralConnection.dest)
}
inline ::std::string* NeuralConnection::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:robogenMessage.NeuralConnection.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NeuralConnection::release_dest() {
  // @@protoc_insertion_point(field_release:robogenMessage.NeuralConnection.dest)
  if (!has_dest()) {
    return NULL;
  }
  clear_has_dest();
  return dest_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NeuralConnection::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.NeuralConnection.dest)
}

// required float weight = 3;
inline bool NeuralConnection::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeuralConnection::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeuralConnection::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeuralConnection::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float NeuralConnection::weight() const {
  // @@protoc_insertion_point(field_get:robogenMessage.NeuralConnection.weight)
  return weight_;
}
inline void NeuralConnection::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.NeuralConnection.weight)
}

// -------------------------------------------------------------------

// Neuron

// required string id = 1;
inline bool Neuron::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Neuron::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Neuron::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Neuron::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Neuron::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.id)
  return id_.GetNoArena();
}
inline void Neuron::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.id)
}
#if LANG_CXX11
inline void Neuron::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.Neuron.id)
}
#endif
inline void Neuron::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.id)
}
inline void Neuron::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.id)
}
inline ::std::string* Neuron::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_id() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.id)
}

// required string layer = 2;
inline bool Neuron::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Neuron::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Neuron::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Neuron::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& Neuron::layer() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.layer)
  return layer_.GetNoArena();
}
inline void Neuron::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.layer)
}
#if LANG_CXX11
inline void Neuron::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.Neuron.layer)
}
#endif
inline void Neuron::set_layer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.layer)
}
inline void Neuron::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.layer)
}
inline ::std::string* Neuron::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_layer() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.layer)
  if (!has_layer()) {
    return NULL;
  }
  clear_has_layer();
  return layer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.layer)
}

// required string type = 3;
inline bool Neuron::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Neuron::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Neuron::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Neuron::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Neuron::type() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.type)
  return type_.GetNoArena();
}
inline void Neuron::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.type)
}
#if LANG_CXX11
inline void Neuron::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.Neuron.type)
}
#endif
inline void Neuron::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.type)
}
inline void Neuron::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.type)
}
inline ::std::string* Neuron::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_type() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.type)
}

// optional float bias = 4;
inline bool Neuron::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Neuron::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Neuron::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Neuron::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float Neuron::bias() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.bias)
  return bias_;
}
inline void Neuron::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.bias)
}

// optional string bodyPartId = 5;
inline bool Neuron::has_bodypartid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Neuron::set_has_bodypartid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Neuron::clear_has_bodypartid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Neuron::clear_bodypartid() {
  bodypartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bodypartid();
}
inline const ::std::string& Neuron::bodypartid() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.bodyPartId)
  return bodypartid_.GetNoArena();
}
inline void Neuron::set_bodypartid(const ::std::string& value) {
  set_has_bodypartid();
  bodypartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.bodyPartId)
}
#if LANG_CXX11
inline void Neuron::set_bodypartid(::std::string&& value) {
  set_has_bodypartid();
  bodypartid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.Neuron.bodyPartId)
}
#endif
inline void Neuron::set_bodypartid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bodypartid();
  bodypartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.bodyPartId)
}
inline void Neuron::set_bodypartid(const char* value, size_t size) {
  set_has_bodypartid();
  bodypartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.bodyPartId)
}
inline ::std::string* Neuron::mutable_bodypartid() {
  set_has_bodypartid();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.bodyPartId)
  return bodypartid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neuron::release_bodypartid() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.bodyPartId)
  if (!has_bodypartid()) {
    return NULL;
  }
  clear_has_bodypartid();
  return bodypartid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neuron::set_allocated_bodypartid(::std::string* bodypartid) {
  if (bodypartid != NULL) {
    set_has_bodypartid();
  } else {
    clear_has_bodypartid();
  }
  bodypartid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodypartid);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.bodyPartId)
}

// optional int32 ioId = 6;
inline bool Neuron::has_ioid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Neuron::set_has_ioid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Neuron::clear_has_ioid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Neuron::clear_ioid() {
  ioid_ = 0;
  clear_has_ioid();
}
inline ::google::protobuf::int32 Neuron::ioid() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.ioId)
  return ioid_;
}
inline void Neuron::set_ioid(::google::protobuf::int32 value) {
  set_has_ioid();
  ioid_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.ioId)
}

// optional float tau = 7;
inline bool Neuron::has_tau() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Neuron::set_has_tau() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Neuron::clear_has_tau() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Neuron::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline float Neuron::tau() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.tau)
  return tau_;
}
inline void Neuron::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.tau)
}

// optional float phaseOffset = 8;
inline bool Neuron::has_phaseoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Neuron::set_has_phaseoffset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Neuron::clear_has_phaseoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Neuron::clear_phaseoffset() {
  phaseoffset_ = 0;
  clear_has_phaseoffset();
}
inline float Neuron::phaseoffset() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.phaseOffset)
  return phaseoffset_;
}
inline void Neuron::set_phaseoffset(float value) {
  set_has_phaseoffset();
  phaseoffset_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.phaseOffset)
}

// optional float period = 9;
inline bool Neuron::has_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Neuron::set_has_period() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Neuron::clear_has_period() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Neuron::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline float Neuron::period() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.period)
  return period_;
}
inline void Neuron::set_period(float value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.period)
}

// optional float gain = 10;
inline bool Neuron::has_gain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Neuron::set_has_gain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Neuron::clear_has_gain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Neuron::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline float Neuron::gain() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.gain)
  return gain_;
}
inline void Neuron::set_gain(float value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.gain)
}

// -------------------------------------------------------------------

// Brain

// repeated .robogenMessage.Neuron neuron = 1;
inline int Brain::neuron_size() const {
  return neuron_.size();
}
inline void Brain::clear_neuron() {
  neuron_.Clear();
}
inline ::robogenMessage::Neuron* Brain::mutable_neuron(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Brain.neuron)
  return neuron_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >*
Brain::mutable_neuron() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Brain.neuron)
  return &neuron_;
}
inline const ::robogenMessage::Neuron& Brain::neuron(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Brain.neuron)
  return neuron_.Get(index);
}
inline ::robogenMessage::Neuron* Brain::add_neuron() {
  // @@protoc_insertion_point(field_add:robogenMessage.Brain.neuron)
  return neuron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >&
Brain::neuron() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Brain.neuron)
  return neuron_;
}

// repeated .robogenMessage.NeuralConnection connection = 2;
inline int Brain::connection_size() const {
  return connection_.size();
}
inline void Brain::clear_connection() {
  connection_.Clear();
}
inline ::robogenMessage::NeuralConnection* Brain::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Brain.connection)
  return connection_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >*
Brain::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Brain.connection)
  return &connection_;
}
inline const ::robogenMessage::NeuralConnection& Brain::connection(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Brain.connection)
  return connection_.Get(index);
}
inline ::robogenMessage::NeuralConnection* Brain::add_connection() {
  // @@protoc_insertion_point(field_add:robogenMessage.Brain.connection)
  return connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >&
Brain::connection() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Brain.connection)
  return connection_;
}

// -------------------------------------------------------------------

// Robot

// required int32 id = 1;
inline bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Robot::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.id)
  return id_;
}
inline void Robot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Robot.id)
}

// required .robogenMessage.Body body = 2;
inline bool Robot::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot::clear_body() {
  if (body_ != NULL) body_->Clear();
  clear_has_body();
}
inline const ::robogenMessage::Body& Robot::_internal_body() const {
  return *body_;
}
inline const ::robogenMessage::Body& Robot::body() const {
  const ::robogenMessage::Body* p = body_;
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.body)
  return p != NULL ? *p : *reinterpret_cast<const ::robogenMessage::Body*>(
      &::robogenMessage::_Body_default_instance_);
}
inline ::robogenMessage::Body* Robot::release_body() {
  // @@protoc_insertion_point(field_release:robogenMessage.Robot.body)
  clear_has_body();
  ::robogenMessage::Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::robogenMessage::Body* Robot::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::robogenMessage::Body>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.Robot.body)
  return body_;
}
inline void Robot::set_allocated_body(::robogenMessage::Body* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    set_has_body();
  } else {
    clear_has_body();
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Robot.body)
}

// required .robogenMessage.Brain brain = 3;
inline bool Robot::has_brain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_brain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_brain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot::clear_brain() {
  if (brain_ != NULL) brain_->Clear();
  clear_has_brain();
}
inline const ::robogenMessage::Brain& Robot::_internal_brain() const {
  return *brain_;
}
inline const ::robogenMessage::Brain& Robot::brain() const {
  const ::robogenMessage::Brain* p = brain_;
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.brain)
  return p != NULL ? *p : *reinterpret_cast<const ::robogenMessage::Brain*>(
      &::robogenMessage::_Brain_default_instance_);
}
inline ::robogenMessage::Brain* Robot::release_brain() {
  // @@protoc_insertion_point(field_release:robogenMessage.Robot.brain)
  clear_has_brain();
  ::robogenMessage::Brain* temp = brain_;
  brain_ = NULL;
  return temp;
}
inline ::robogenMessage::Brain* Robot::mutable_brain() {
  set_has_brain();
  if (brain_ == NULL) {
    auto* p = CreateMaybeMessage<::robogenMessage::Brain>(GetArenaNoVirtual());
    brain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.Robot.brain)
  return brain_;
}
inline void Robot::set_allocated_brain(::robogenMessage::Brain* brain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete brain_;
  }
  if (brain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brain, submessage_arena);
    }
    set_has_brain();
  } else {
    clear_has_brain();
  }
  brain_ = brain;
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Robot.brain)
}

// CH added to set and return robot complexity

inline void Robot::set_complexity(float value){
  complexity_ = value;
}

inline float Robot::get_complexity() const {
  return complexity_;
}

inline void Robot::set_complexity_cost(float value){
  complexityCost_ = value;
}

inline float Robot::get_complexity_cost() const {
  return complexityCost_;
}



// -------------------------------------------------------------------

// Obstacle

// required float x = 1;
inline bool Obstacle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Obstacle::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.x)
  return x_;
}
inline void Obstacle::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.x)
}

// required float y = 2;
inline bool Obstacle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Obstacle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Obstacle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Obstacle::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.y)
  return y_;
}
inline void Obstacle::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.y)
}

// required float z = 3;
inline bool Obstacle::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacle::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacle::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Obstacle::z() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.z)
  return z_;
}
inline void Obstacle::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.z)
}

// required float xSize = 4;
inline bool Obstacle::has_xsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::set_has_xsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Obstacle::clear_has_xsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Obstacle::clear_xsize() {
  xsize_ = 0;
  clear_has_xsize();
}
inline float Obstacle::xsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.xSize)
  return xsize_;
}
inline void Obstacle::set_xsize(float value) {
  set_has_xsize();
  xsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.xSize)
}

// required float ySize = 5;
inline bool Obstacle::has_ysize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::set_has_ysize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Obstacle::clear_has_ysize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Obstacle::clear_ysize() {
  ysize_ = 0;
  clear_has_ysize();
}
inline float Obstacle::ysize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.ySize)
  return ysize_;
}
inline void Obstacle::set_ysize(float value) {
  set_has_ysize();
  ysize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.ySize)
}

// required float zSize = 6;
inline bool Obstacle::has_zsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::set_has_zsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Obstacle::clear_has_zsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Obstacle::clear_zsize() {
  zsize_ = 0;
  clear_has_zsize();
}
inline float Obstacle::zsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.zSize)
  return zsize_;
}
inline void Obstacle::set_zsize(float value) {
  set_has_zsize();
  zsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.zSize)
}

// required float density = 7;
inline bool Obstacle::has_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::set_has_density() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Obstacle::clear_has_density() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Obstacle::clear_density() {
  density_ = 0;
  clear_has_density();
}
inline float Obstacle::density() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.density)
  return density_;
}
inline void Obstacle::set_density(float value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.density)
}

// required float xRotation = 8;
inline bool Obstacle::has_xrotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Obstacle::set_has_xrotation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Obstacle::clear_has_xrotation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Obstacle::clear_xrotation() {
  xrotation_ = 0;
  clear_has_xrotation();
}
inline float Obstacle::xrotation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.xRotation)
  return xrotation_;
}
inline void Obstacle::set_xrotation(float value) {
  set_has_xrotation();
  xrotation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.xRotation)
}

// required float yRotation = 9;
inline bool Obstacle::has_yrotation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Obstacle::set_has_yrotation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Obstacle::clear_has_yrotation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Obstacle::clear_yrotation() {
  yrotation_ = 0;
  clear_has_yrotation();
}
inline float Obstacle::yrotation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.yRotation)
  return yrotation_;
}
inline void Obstacle::set_yrotation(float value) {
  set_has_yrotation();
  yrotation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.yRotation)
}

// required float zRotation = 10;
inline bool Obstacle::has_zrotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Obstacle::set_has_zrotation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Obstacle::clear_has_zrotation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Obstacle::clear_zrotation() {
  zrotation_ = 0;
  clear_has_zrotation();
}
inline float Obstacle::zrotation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.zRotation)
  return zrotation_;
}
inline void Obstacle::set_zrotation(float value) {
  set_has_zrotation();
  zrotation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.zRotation)
}

// required float rotationAngle = 11;
inline bool Obstacle::has_rotationangle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Obstacle::set_has_rotationangle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Obstacle::clear_has_rotationangle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Obstacle::clear_rotationangle() {
  rotationangle_ = 0;
  clear_has_rotationangle();
}
inline float Obstacle::rotationangle() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.rotationAngle)
  return rotationangle_;
}
inline void Obstacle::set_rotationangle(float value) {
  set_has_rotationangle();
  rotationangle_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.rotationAngle)
}

// -------------------------------------------------------------------

// LightSource

// required float x = 1;
inline bool LightSource::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightSource::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightSource::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightSource::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float LightSource::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.x)
  return x_;
}
inline void LightSource::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.x)
}

// required float y = 2;
inline bool LightSource::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightSource::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightSource::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightSource::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float LightSource::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.y)
  return y_;
}
inline void LightSource::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.y)
}

// required float z = 3;
inline bool LightSource::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightSource::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightSource::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightSource::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float LightSource::z() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.z)
  return z_;
}
inline void LightSource::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.z)
}

// required float intensity = 7;
inline bool LightSource::has_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightSource::set_has_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LightSource::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LightSource::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline float LightSource::intensity() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.intensity)
  return intensity_;
}
inline void LightSource::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.intensity)
}

// -------------------------------------------------------------------

// StartPosition

// required float x = 1;
inline bool StartPosition::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartPosition::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartPosition::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float StartPosition::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.StartPosition.x)
  return x_;
}
inline void StartPosition::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.StartPosition.x)
}

// required float y = 2;
inline bool StartPosition::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartPosition::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartPosition::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float StartPosition::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.StartPosition.y)
  return y_;
}
inline void StartPosition::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.StartPosition.y)
}

// required float azimuth = 3;
inline bool StartPosition::has_azimuth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartPosition::set_has_azimuth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartPosition::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartPosition::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline float StartPosition::azimuth() const {
  // @@protoc_insertion_point(field_get:robogenMessage.StartPosition.azimuth)
  return azimuth_;
}
inline void StartPosition::set_azimuth(float value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.StartPosition.azimuth)
}

// -------------------------------------------------------------------

// SimulatorConf

// required float terrainWidth = 1;
inline bool SimulatorConf::has_terrainwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimulatorConf::set_has_terrainwidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimulatorConf::clear_has_terrainwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimulatorConf::clear_terrainwidth() {
  terrainwidth_ = 0;
  clear_has_terrainwidth();
}
inline float SimulatorConf::terrainwidth() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainWidth)
  return terrainwidth_;
}
inline void SimulatorConf::set_terrainwidth(float value) {
  set_has_terrainwidth();
  terrainwidth_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainWidth)
}

// required float terrainLength = 2;
inline bool SimulatorConf::has_terrainlength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimulatorConf::set_has_terrainlength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimulatorConf::clear_has_terrainlength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimulatorConf::clear_terrainlength() {
  terrainlength_ = 0;
  clear_has_terrainlength();
}
inline float SimulatorConf::terrainlength() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainLength)
  return terrainlength_;
}
inline void SimulatorConf::set_terrainlength(float value) {
  set_has_terrainlength();
  terrainlength_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainLength)
}

// repeated .robogenMessage.Obstacle obstacles = 3;
inline int SimulatorConf::obstacles_size() const {
  return obstacles_.size();
}
inline void SimulatorConf::clear_obstacles() {
  obstacles_.Clear();
}
inline ::robogenMessage::Obstacle* SimulatorConf::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.obstacles)
  return obstacles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >*
SimulatorConf::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.obstacles)
  return &obstacles_;
}
inline const ::robogenMessage::Obstacle& SimulatorConf::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.obstacles)
  return obstacles_.Get(index);
}
inline ::robogenMessage::Obstacle* SimulatorConf::add_obstacles() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.obstacles)
  return obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >&
SimulatorConf::obstacles() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.obstacles)
  return obstacles_;
}

// required string scenario = 4;
inline bool SimulatorConf::has_scenario() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimulatorConf::set_has_scenario() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimulatorConf::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimulatorConf::clear_scenario() {
  scenario_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scenario();
}
inline const ::std::string& SimulatorConf::scenario() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.scenario)
  return scenario_.GetNoArena();
}
inline void SimulatorConf::set_scenario(const ::std::string& value) {
  set_has_scenario();
  scenario_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.scenario)
}
#if LANG_CXX11
inline void SimulatorConf::set_scenario(::std::string&& value) {
  set_has_scenario();
  scenario_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.SimulatorConf.scenario)
}
#endif
inline void SimulatorConf::set_scenario(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scenario();
  scenario_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.SimulatorConf.scenario)
}
inline void SimulatorConf::set_scenario(const char* value, size_t size) {
  set_has_scenario();
  scenario_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.SimulatorConf.scenario)
}
inline ::std::string* SimulatorConf::mutable_scenario() {
  set_has_scenario();
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.scenario)
  return scenario_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimulatorConf::release_scenario() {
  // @@protoc_insertion_point(field_release:robogenMessage.SimulatorConf.scenario)
  if (!has_scenario()) {
    return NULL;
  }
  clear_has_scenario();
  return scenario_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimulatorConf::set_allocated_scenario(::std::string* scenario) {
  if (scenario != NULL) {
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  scenario_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scenario);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.SimulatorConf.scenario)
}

// repeated .robogenMessage.LightSource lightSources = 5;
inline int SimulatorConf::lightsources_size() const {
  return lightsources_.size();
}
inline void SimulatorConf::clear_lightsources() {
  lightsources_.Clear();
}
inline ::robogenMessage::LightSource* SimulatorConf::mutable_lightsources(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.lightSources)
  return lightsources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource >*
SimulatorConf::mutable_lightsources() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.lightSources)
  return &lightsources_;
}
inline const ::robogenMessage::LightSource& SimulatorConf::lightsources(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.lightSources)
  return lightsources_.Get(index);
}
inline ::robogenMessage::LightSource* SimulatorConf::add_lightsources() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.lightSources)
  return lightsources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource >&
SimulatorConf::lightsources() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.lightSources)
  return lightsources_;
}

// required float timeStep = 6;
inline bool SimulatorConf::has_timestep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimulatorConf::set_has_timestep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimulatorConf::clear_has_timestep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimulatorConf::clear_timestep() {
  timestep_ = 0;
  clear_has_timestep();
}
inline float SimulatorConf::timestep() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.timeStep)
  return timestep_;
}
inline void SimulatorConf::set_timestep(float value) {
  set_has_timestep();
  timestep_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.timeStep)
}

// required int32 nTimeSteps = 7;
inline bool SimulatorConf::has_ntimesteps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimulatorConf::set_has_ntimesteps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimulatorConf::clear_has_ntimesteps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimulatorConf::clear_ntimesteps() {
  ntimesteps_ = 0;
  clear_has_ntimesteps();
}
inline ::google::protobuf::int32 SimulatorConf::ntimesteps() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.nTimeSteps)
  return ntimesteps_;
}
inline void SimulatorConf::set_ntimesteps(::google::protobuf::int32 value) {
  set_has_ntimesteps();
  ntimesteps_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.nTimeSteps)
}

// repeated .robogenMessage.StartPosition startPositions = 8;
inline int SimulatorConf::startpositions_size() const {
  return startpositions_.size();
}
inline void SimulatorConf::clear_startpositions() {
  startpositions_.Clear();
}
inline ::robogenMessage::StartPosition* SimulatorConf::mutable_startpositions(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.startPositions)
  return startpositions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >*
SimulatorConf::mutable_startpositions() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.startPositions)
  return &startpositions_;
}
inline const ::robogenMessage::StartPosition& SimulatorConf::startpositions(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.startPositions)
  return startpositions_.Get(index);
}
inline ::robogenMessage::StartPosition* SimulatorConf::add_startpositions() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.startPositions)
  return startpositions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >&
SimulatorConf::startpositions() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.startPositions)
  return startpositions_;
}

// required int32 actuationPeriod = 9;
inline bool SimulatorConf::has_actuationperiod() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimulatorConf::set_has_actuationperiod() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimulatorConf::clear_has_actuationperiod() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimulatorConf::clear_actuationperiod() {
  actuationperiod_ = 0;
  clear_has_actuationperiod();
}
inline ::google::protobuf::int32 SimulatorConf::actuationperiod() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.actuationPeriod)
  return actuationperiod_;
}
inline void SimulatorConf::set_actuationperiod(::google::protobuf::int32 value) {
  set_has_actuationperiod();
  actuationperiod_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.actuationPeriod)
}

// required float terrainFriction = 10;
inline bool SimulatorConf::has_terrainfriction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimulatorConf::set_has_terrainfriction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SimulatorConf::clear_has_terrainfriction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SimulatorConf::clear_terrainfriction() {
  terrainfriction_ = 0;
  clear_has_terrainfriction();
}
inline float SimulatorConf::terrainfriction() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainFriction)
  return terrainfriction_;
}
inline void SimulatorConf::set_terrainfriction(float value) {
  set_has_terrainfriction();
  terrainfriction_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainFriction)
}

// required float sensorNoiseLevel = 11;
inline bool SimulatorConf::has_sensornoiselevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimulatorConf::set_has_sensornoiselevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SimulatorConf::clear_has_sensornoiselevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SimulatorConf::clear_sensornoiselevel() {
  sensornoiselevel_ = 0;
  clear_has_sensornoiselevel();
}
inline float SimulatorConf::sensornoiselevel() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.sensorNoiseLevel)
  return sensornoiselevel_;
}
inline void SimulatorConf::set_sensornoiselevel(float value) {
  set_has_sensornoiselevel();
  sensornoiselevel_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.sensorNoiseLevel)
}

// required float motorNoiseLevel = 12;
inline bool SimulatorConf::has_motornoiselevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimulatorConf::set_has_motornoiselevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SimulatorConf::clear_has_motornoiselevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SimulatorConf::clear_motornoiselevel() {
  motornoiselevel_ = 0;
  clear_has_motornoiselevel();
}
inline float SimulatorConf::motornoiselevel() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.motorNoiseLevel)
  return motornoiselevel_;
}
inline void SimulatorConf::set_motornoiselevel(float value) {
  set_has_motornoiselevel();
  motornoiselevel_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.motorNoiseLevel)
}

// required bool capAcceleration = 13;
inline bool SimulatorConf::has_capacceleration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SimulatorConf::set_has_capacceleration() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SimulatorConf::clear_has_capacceleration() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SimulatorConf::clear_capacceleration() {
  capacceleration_ = false;
  clear_has_capacceleration();
}
inline bool SimulatorConf::capacceleration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.capAcceleration)
  return capacceleration_;
}
inline void SimulatorConf::set_capacceleration(bool value) {
  set_has_capacceleration();
  capacceleration_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.capAcceleration)
}

// required float maxLinearAcceleration = 14;
inline bool SimulatorConf::has_maxlinearacceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SimulatorConf::set_has_maxlinearacceleration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SimulatorConf::clear_has_maxlinearacceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SimulatorConf::clear_maxlinearacceleration() {
  maxlinearacceleration_ = 0;
  clear_has_maxlinearacceleration();
}
inline float SimulatorConf::maxlinearacceleration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.maxLinearAcceleration)
  return maxlinearacceleration_;
}
inline void SimulatorConf::set_maxlinearacceleration(float value) {
  set_has_maxlinearacceleration();
  maxlinearacceleration_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.maxLinearAcceleration)
}

// required float maxAngularAcceleration = 15;
inline bool SimulatorConf::has_maxangularacceleration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SimulatorConf::set_has_maxangularacceleration() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SimulatorConf::clear_has_maxangularacceleration() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SimulatorConf::clear_maxangularacceleration() {
  maxangularacceleration_ = 0;
  clear_has_maxangularacceleration();
}
inline float SimulatorConf::maxangularacceleration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.maxAngularAcceleration)
  return maxangularacceleration_;
}
inline void SimulatorConf::set_maxangularacceleration(float value) {
  set_has_maxangularacceleration();
  maxangularacceleration_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.maxAngularAcceleration)
}

// required int32 maxDirectionShiftsPerSecond = 16;
inline bool SimulatorConf::has_maxdirectionshiftspersecond() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SimulatorConf::set_has_maxdirectionshiftspersecond() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SimulatorConf::clear_has_maxdirectionshiftspersecond() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SimulatorConf::clear_maxdirectionshiftspersecond() {
  maxdirectionshiftspersecond_ = 0;
  clear_has_maxdirectionshiftspersecond();
}
inline ::google::protobuf::int32 SimulatorConf::maxdirectionshiftspersecond() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.maxDirectionShiftsPerSecond)
  return maxdirectionshiftspersecond_;
}
inline void SimulatorConf::set_maxdirectionshiftspersecond(::google::protobuf::int32 value) {
  set_has_maxdirectionshiftspersecond();
  maxdirectionshiftspersecond_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.maxDirectionShiftsPerSecond)
}

// required float gravityX = 17;
inline bool SimulatorConf::has_gravityx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SimulatorConf::set_has_gravityx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SimulatorConf::clear_has_gravityx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SimulatorConf::clear_gravityx() {
  gravityx_ = 0;
  clear_has_gravityx();
}
inline float SimulatorConf::gravityx() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gravityX)
  return gravityx_;
}
inline void SimulatorConf::set_gravityx(float value) {
  set_has_gravityx();
  gravityx_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gravityX)
}

// required float gravityY = 18;
inline bool SimulatorConf::has_gravityy() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SimulatorConf::set_has_gravityy() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SimulatorConf::clear_has_gravityy() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SimulatorConf::clear_gravityy() {
  gravityy_ = 0;
  clear_has_gravityy();
}
inline float SimulatorConf::gravityy() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gravityY)
  return gravityy_;
}
inline void SimulatorConf::set_gravityy(float value) {
  set_has_gravityy();
  gravityy_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gravityY)
}

// required float gravityZ = 19;
inline bool SimulatorConf::has_gravityz() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SimulatorConf::set_has_gravityz() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SimulatorConf::clear_has_gravityz() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SimulatorConf::clear_gravityz() {
  gravityz_ = 0;
  clear_has_gravityz();
}
inline float SimulatorConf::gravityz() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gravityZ)
  return gravityz_;
}
inline void SimulatorConf::set_gravityz(float value) {
  set_has_gravityz();
  gravityz_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gravityZ)
}

// required int32 terrainType = 20;
inline bool SimulatorConf::has_terraintype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SimulatorConf::set_has_terraintype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SimulatorConf::clear_has_terraintype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SimulatorConf::clear_terraintype() {
  terraintype_ = 0;
  clear_has_terraintype();
}
inline ::google::protobuf::int32 SimulatorConf::terraintype() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainType)
  return terraintype_;
}
inline void SimulatorConf::set_terraintype(::google::protobuf::int32 value) {
  set_has_terraintype();
  terraintype_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainType)
}

// required float terrainHeight = 21;
inline bool SimulatorConf::has_terrainheight() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SimulatorConf::set_has_terrainheight() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SimulatorConf::clear_has_terrainheight() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SimulatorConf::clear_terrainheight() {
  terrainheight_ = 0;
  clear_has_terrainheight();
}
inline float SimulatorConf::terrainheight() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainHeight)
  return terrainheight_;
}
inline void SimulatorConf::set_terrainheight(float value) {
  set_has_terrainheight();
  terrainheight_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainHeight)
}

// required string terrainHeightFieldFileName = 22;
inline bool SimulatorConf::has_terrainheightfieldfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimulatorConf::set_has_terrainheightfieldfilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimulatorConf::clear_has_terrainheightfieldfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimulatorConf::clear_terrainheightfieldfilename() {
  terrainheightfieldfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_terrainheightfieldfilename();
}
inline const ::std::string& SimulatorConf::terrainheightfieldfilename() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
  return terrainheightfieldfilename_.GetNoArena();
}
inline void SimulatorConf::set_terrainheightfieldfilename(const ::std::string& value) {
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
#if LANG_CXX11
inline void SimulatorConf::set_terrainheightfieldfilename(::std::string&& value) {
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
#endif
inline void SimulatorConf::set_terrainheightfieldfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
inline void SimulatorConf::set_terrainheightfieldfilename(const char* value, size_t size) {
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
inline ::std::string* SimulatorConf::mutable_terrainheightfieldfilename() {
  set_has_terrainheightfieldfilename();
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
  return terrainheightfieldfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimulatorConf::release_terrainheightfieldfilename() {
  // @@protoc_insertion_point(field_release:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
  if (!has_terrainheightfieldfilename()) {
    return NULL;
  }
  clear_has_terrainheightfieldfilename();
  return terrainheightfieldfilename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimulatorConf::set_allocated_terrainheightfieldfilename(::std::string* terrainheightfieldfilename) {
  if (terrainheightfieldfilename != NULL) {
    set_has_terrainheightfieldfilename();
  } else {
    clear_has_terrainheightfieldfilename();
  }
  terrainheightfieldfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), terrainheightfieldfilename);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}

// required bool disallowObstacleCollisions = 23;
inline bool SimulatorConf::has_disallowobstaclecollisions() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SimulatorConf::set_has_disallowobstaclecollisions() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SimulatorConf::clear_has_disallowobstaclecollisions() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SimulatorConf::clear_disallowobstaclecollisions() {
  disallowobstaclecollisions_ = false;
  clear_has_disallowobstaclecollisions();
}
inline bool SimulatorConf::disallowobstaclecollisions() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.disallowObstacleCollisions)
  return disallowobstaclecollisions_;
}
inline void SimulatorConf::set_disallowobstaclecollisions(bool value) {
  set_has_disallowobstaclecollisions();
  disallowobstaclecollisions_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.disallowObstacleCollisions)
}

// required uint32 obstacleOverlapPolicy = 24;
inline bool SimulatorConf::has_obstacleoverlappolicy() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SimulatorConf::set_has_obstacleoverlappolicy() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SimulatorConf::clear_has_obstacleoverlappolicy() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SimulatorConf::clear_obstacleoverlappolicy() {
  obstacleoverlappolicy_ = 0u;
  clear_has_obstacleoverlappolicy();
}
inline ::google::protobuf::uint32 SimulatorConf::obstacleoverlappolicy() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.obstacleOverlapPolicy)
  return obstacleoverlappolicy_;
}
inline void SimulatorConf::set_obstacleoverlappolicy(::google::protobuf::uint32 value) {
  set_has_obstacleoverlappolicy();
  obstacleoverlappolicy_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.obstacleOverlapPolicy)
}

// -------------------------------------------------------------------

// EvaluationRequest

// required .robogenMessage.Robot robot = 1;
inline bool EvaluationRequest::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvaluationRequest::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvaluationRequest::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvaluationRequest::clear_robot() {
  if (robot_ != NULL) robot_->Clear();
  clear_has_robot();
}
inline const ::robogenMessage::Robot& EvaluationRequest::_internal_robot() const {
  return *robot_;
}
inline const ::robogenMessage::Robot& EvaluationRequest::robot() const {
  const ::robogenMessage::Robot* p = robot_;
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationRequest.robot)
  return p != NULL ? *p : *reinterpret_cast<const ::robogenMessage::Robot*>(
      &::robogenMessage::_Robot_default_instance_);
}
inline ::robogenMessage::Robot* EvaluationRequest::release_robot() {
  // @@protoc_insertion_point(field_release:robogenMessage.EvaluationRequest.robot)
  clear_has_robot();
  ::robogenMessage::Robot* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline ::robogenMessage::Robot* EvaluationRequest::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) {
    auto* p = CreateMaybeMessage<::robogenMessage::Robot>(GetArenaNoVirtual());
    robot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.EvaluationRequest.robot)
  return robot_;
}
inline void EvaluationRequest::set_allocated_robot(::robogenMessage::Robot* robot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete robot_;
  }
  if (robot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    set_has_robot();
  } else {
    clear_has_robot();
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.EvaluationRequest.robot)
}

// required .robogenMessage.SimulatorConf configuration = 2;
inline bool EvaluationRequest::has_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvaluationRequest::set_has_configuration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvaluationRequest::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvaluationRequest::clear_configuration() {
  if (configuration_ != NULL) configuration_->Clear();
  clear_has_configuration();
}
inline const ::robogenMessage::SimulatorConf& EvaluationRequest::_internal_configuration() const {
  return *configuration_;
}
inline const ::robogenMessage::SimulatorConf& EvaluationRequest::configuration() const {
  const ::robogenMessage::SimulatorConf* p = configuration_;
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationRequest.configuration)
  return p != NULL ? *p : *reinterpret_cast<const ::robogenMessage::SimulatorConf*>(
      &::robogenMessage::_SimulatorConf_default_instance_);
}
inline ::robogenMessage::SimulatorConf* EvaluationRequest::release_configuration() {
  // @@protoc_insertion_point(field_release:robogenMessage.EvaluationRequest.configuration)
  clear_has_configuration();
  ::robogenMessage::SimulatorConf* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
inline ::robogenMessage::SimulatorConf* EvaluationRequest::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) {
    auto* p = CreateMaybeMessage<::robogenMessage::SimulatorConf>(GetArenaNoVirtual());
    configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.EvaluationRequest.configuration)
  return configuration_;
}
inline void EvaluationRequest::set_allocated_configuration(::robogenMessage::SimulatorConf* configuration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete configuration_;
  }
  if (configuration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      configuration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.EvaluationRequest.configuration)
}

// -------------------------------------------------------------------

// EvaluationResult

// required int32 id = 1;
inline bool EvaluationResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvaluationResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvaluationResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvaluationResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EvaluationResult::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.id)
  return id_;
}
inline void EvaluationResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.id)
}

// required float fitness = 2;
inline bool EvaluationResult::has_fitness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvaluationResult::set_has_fitness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvaluationResult::clear_has_fitness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvaluationResult::clear_fitness() {
  fitness_ = 0;
  clear_has_fitness();
}
inline float EvaluationResult::fitness() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.fitness)
  return fitness_;
}
inline void EvaluationResult::set_fitness(float value) {
  set_has_fitness();
  fitness_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.fitness)
}

// repeated float objectives = 3;
inline int EvaluationResult::objectives_size() const {
  return objectives_.size();
}
inline void EvaluationResult::clear_objectives() {
  objectives_.Clear();
}
inline float EvaluationResult::objectives(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.objectives)
  return objectives_.Get(index);
}
inline void EvaluationResult::set_objectives(int index, float value) {
  objectives_.Set(index, value);
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.objectives)
}
inline void EvaluationResult::add_objectives(float value) {
  objectives_.Add(value);
  // @@protoc_insertion_point(field_add:robogenMessage.EvaluationResult.objectives)
}
inline const ::google::protobuf::RepeatedField< float >&
EvaluationResult::objectives() const {
  // @@protoc_insertion_point(field_list:robogenMessage.EvaluationResult.objectives)
  return objectives_;
}
inline ::google::protobuf::RepeatedField< float >*
EvaluationResult::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.EvaluationResult.objectives)
  return &objectives_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robogenMessage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_robogen_2eproto
