// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robogen.proto

#include "robogen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_robogen_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BodyConnection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EvolvableParameter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LightSource;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NeuralConnection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Neuron;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BodyPart;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Body;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Brain;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Robot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robogen_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SimulatorConf;
}  // namespace protobuf_robogen_2eproto
namespace robogenMessage {
class EvolvableParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvolvableParameter>
      _instance;
} _EvolvableParameter_default_instance_;
class BodyPartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BodyPart>
      _instance;
} _BodyPart_default_instance_;
class BodyConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BodyConnection>
      _instance;
} _BodyConnection_default_instance_;
class BodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Body>
      _instance;
} _Body_default_instance_;
class NeuralConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeuralConnection>
      _instance;
} _NeuralConnection_default_instance_;
class NeuronDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Neuron>
      _instance;
} _Neuron_default_instance_;
class BrainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brain>
      _instance;
} _Brain_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Robot>
      _instance;
} _Robot_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacle>
      _instance;
} _Obstacle_default_instance_;
class LightSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LightSource>
      _instance;
} _LightSource_default_instance_;
class StartPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartPosition>
      _instance;
} _StartPosition_default_instance_;
class SimulatorConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulatorConf>
      _instance;
} _SimulatorConf_default_instance_;
class EvaluationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvaluationRequest>
      _instance;
} _EvaluationRequest_default_instance_;
class EvaluationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvaluationResult>
      _instance;
} _EvaluationResult_default_instance_;
}  // namespace robogenMessage
namespace protobuf_robogen_2eproto {
static void InitDefaultsEvolvableParameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_EvolvableParameter_default_instance_;
    new (ptr) ::robogenMessage::EvolvableParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::EvolvableParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EvolvableParameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvolvableParameter}, {}};

static void InitDefaultsBodyPart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_BodyPart_default_instance_;
    new (ptr) ::robogenMessage::BodyPart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::BodyPart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BodyPart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBodyPart}, {
      &protobuf_robogen_2eproto::scc_info_EvolvableParameter.base,}};

static void InitDefaultsBodyConnection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_BodyConnection_default_instance_;
    new (ptr) ::robogenMessage::BodyConnection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::BodyConnection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BodyConnection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBodyConnection}, {}};

static void InitDefaultsBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_Body_default_instance_;
    new (ptr) ::robogenMessage::Body();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::Body::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Body =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBody}, {
      &protobuf_robogen_2eproto::scc_info_BodyPart.base,
      &protobuf_robogen_2eproto::scc_info_BodyConnection.base,}};

static void InitDefaultsNeuralConnection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_NeuralConnection_default_instance_;
    new (ptr) ::robogenMessage::NeuralConnection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::NeuralConnection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NeuralConnection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNeuralConnection}, {}};

static void InitDefaultsNeuron() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_Neuron_default_instance_;
    new (ptr) ::robogenMessage::Neuron();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::Neuron::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Neuron =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNeuron}, {}};

static void InitDefaultsBrain() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_Brain_default_instance_;
    new (ptr) ::robogenMessage::Brain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::Brain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Brain =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBrain}, {
      &protobuf_robogen_2eproto::scc_info_Neuron.base,
      &protobuf_robogen_2eproto::scc_info_NeuralConnection.base,}};

static void InitDefaultsRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_Robot_default_instance_;
    new (ptr) ::robogenMessage::Robot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::Robot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Robot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobot}, {
      &protobuf_robogen_2eproto::scc_info_Body.base,
      &protobuf_robogen_2eproto::scc_info_Brain.base,}};

static void InitDefaultsObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_Obstacle_default_instance_;
    new (ptr) ::robogenMessage::Obstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::Obstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacle}, {}};

static void InitDefaultsLightSource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_LightSource_default_instance_;
    new (ptr) ::robogenMessage::LightSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::LightSource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LightSource =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLightSource}, {}};

static void InitDefaultsStartPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_StartPosition_default_instance_;
    new (ptr) ::robogenMessage::StartPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::StartPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartPosition}, {}};

static void InitDefaultsSimulatorConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_SimulatorConf_default_instance_;
    new (ptr) ::robogenMessage::SimulatorConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::SimulatorConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SimulatorConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSimulatorConf}, {
      &protobuf_robogen_2eproto::scc_info_Obstacle.base,
      &protobuf_robogen_2eproto::scc_info_LightSource.base,
      &protobuf_robogen_2eproto::scc_info_StartPosition.base,}};

static void InitDefaultsEvaluationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_EvaluationRequest_default_instance_;
    new (ptr) ::robogenMessage::EvaluationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::EvaluationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EvaluationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEvaluationRequest}, {
      &protobuf_robogen_2eproto::scc_info_Robot.base,
      &protobuf_robogen_2eproto::scc_info_SimulatorConf.base,}};

static void InitDefaultsEvaluationResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robogenMessage::_EvaluationResult_default_instance_;
    new (ptr) ::robogenMessage::EvaluationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robogenMessage::EvaluationResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EvaluationResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvaluationResult}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EvolvableParameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BodyPart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BodyConnection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Body.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NeuralConnection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Neuron.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brain.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Robot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LightSource.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulatorConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EvaluationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EvaluationResult.base);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvolvableParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvolvableParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvolvableParameter, paramvalue_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, evolvableparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyPart, orientation_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyConnection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyConnection, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyConnection, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyConnection, srcslot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::BodyConnection, destslot_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Body, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Body, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Body, connection_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::NeuralConnection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::NeuralConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::NeuralConnection, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::NeuralConnection, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::NeuralConnection, weight_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, bodypartid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, ioid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, tau_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, phaseoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Neuron, gain_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Brain, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Brain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Brain, neuron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Brain, connection_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, brain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, complexity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Robot, complexitycost_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, xsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, ysize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, zsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, xrotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, yrotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, zrotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::Obstacle, rotationangle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::LightSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::LightSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::LightSource, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::LightSource, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::LightSource, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::LightSource, intensity_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::StartPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::StartPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::StartPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::StartPosition, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::StartPosition, azimuth_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, terrainwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, terrainlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, scenario_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, lightsources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, timestep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, ntimesteps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, startpositions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, actuationperiod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, terrainfriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, sensornoiselevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, motornoiselevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, capacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, maxlinearacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, maxangularacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, maxdirectionshiftspersecond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, gravityx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, gravityy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, gravityz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, terraintype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, terrainheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, terrainheightfieldfilename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, disallowobstaclecollisions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::SimulatorConf, obstacleoverlappolicy_),
  2,
  3,
  ~0u,
  0,
  ~0u,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  15,
  10,
  11,
  12,
  13,
  14,
  17,
  18,
  19,
  1,
  16,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationRequest, robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationRequest, configuration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, fitness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, objectives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, endposx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robogenMessage::EvaluationResult, endposy_),
  0,
  1,
  ~0u,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::robogenMessage::EvolvableParameter)},
  { 7, 17, sizeof(::robogenMessage::BodyPart)},
  { 22, 31, sizeof(::robogenMessage::BodyConnection)},
  { 35, 42, sizeof(::robogenMessage::Body)},
  { 44, 52, sizeof(::robogenMessage::NeuralConnection)},
  { 55, 70, sizeof(::robogenMessage::Neuron)},
  { 80, 87, sizeof(::robogenMessage::Brain)},
  { 89, 99, sizeof(::robogenMessage::Robot)},
  { 104, 120, sizeof(::robogenMessage::Obstacle)},
  { 131, 140, sizeof(::robogenMessage::LightSource)},
  { 144, 152, sizeof(::robogenMessage::StartPosition)},
  { 155, 184, sizeof(::robogenMessage::SimulatorConf)},
  { 208, 215, sizeof(::robogenMessage::EvaluationRequest)},
  { 217, 227, sizeof(::robogenMessage::EvaluationResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_EvolvableParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_BodyPart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_BodyConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_Body_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_NeuralConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_Neuron_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_Brain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_Robot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_Obstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_LightSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_StartPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_SimulatorConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_EvaluationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robogenMessage::_EvaluationResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "robogen.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rrobogen.proto\022\016robogenMessage\"(\n\022Evolv"
      "ableParameter\022\022\n\nparamValue\030\001 \002(\002\"\203\001\n\010Bo"
      "dyPart\022\n\n\002id\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\014\n\004root"
      "\030\003 \002(\010\022:\n\016evolvableParam\030\004 \003(\0132\".robogen"
      "Message.EvolvableParameter\022\023\n\013orientatio"
      "n\030\005 \002(\005\"N\n\016BodyConnection\022\013\n\003src\030\001 \002(\t\022\014"
      "\n\004dest\030\002 \002(\t\022\017\n\007srcSlot\030\003 \002(\005\022\020\n\010destSlo"
      "t\030\004 \002(\005\"b\n\004Body\022&\n\004part\030\001 \003(\0132\030.robogenM"
      "essage.BodyPart\0222\n\nconnection\030\002 \003(\0132\036.ro"
      "bogenMessage.BodyConnection\"=\n\020NeuralCon"
      "nection\022\013\n\003src\030\001 \002(\t\022\014\n\004dest\030\002 \002(\t\022\016\n\006we"
      "ight\030\003 \002(\002\"\241\001\n\006Neuron\022\n\n\002id\030\001 \002(\t\022\r\n\005lay"
      "er\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\014\n\004bias\030\004 \001(\002\022\022\n\n"
      "bodyPartId\030\005 \001(\t\022\014\n\004ioId\030\006 \001(\005\022\013\n\003tau\030\007 "
      "\001(\002\022\023\n\013phaseOffset\030\010 \001(\002\022\016\n\006period\030\t \001(\002"
      "\022\014\n\004gain\030\n \001(\002\"e\n\005Brain\022&\n\006neuron\030\001 \003(\0132"
      "\026.robogenMessage.Neuron\0224\n\nconnection\030\002 "
      "\003(\0132 .robogenMessage.NeuralConnection\"\211\001"
      "\n\005Robot\022\n\n\002id\030\001 \002(\005\022\"\n\004body\030\002 \002(\0132\024.robo"
      "genMessage.Body\022$\n\005brain\030\003 \002(\0132\025.robogen"
      "Message.Brain\022\022\n\ncomplexity\030\004 \002(\002\022\026\n\016com"
      "plexityCost\030\005 \002(\002\"\271\001\n\010Obstacle\022\t\n\001x\030\001 \002("
      "\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\r\n\005xSize\030\004 \002(\002\022\r"
      "\n\005ySize\030\005 \002(\002\022\r\n\005zSize\030\006 \002(\002\022\017\n\007density\030"
      "\007 \002(\002\022\021\n\txRotation\030\010 \002(\002\022\021\n\tyRotation\030\t "
      "\002(\002\022\021\n\tzRotation\030\n \002(\002\022\025\n\rrotationAngle\030"
      "\013 \002(\002\"A\n\013LightSource\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002"
      "(\002\022\t\n\001z\030\003 \002(\002\022\021\n\tintensity\030\007 \002(\002\"6\n\rStar"
      "tPosition\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\017\n\007azimu"
      "th\030\003 \002(\002\"\266\005\n\rSimulatorConf\022\024\n\014terrainWid"
      "th\030\001 \002(\002\022\025\n\rterrainLength\030\002 \002(\002\022+\n\tobsta"
      "cles\030\003 \003(\0132\030.robogenMessage.Obstacle\022\020\n\010"
      "scenario\030\004 \002(\t\0221\n\014lightSources\030\005 \003(\0132\033.r"
      "obogenMessage.LightSource\022\020\n\010timeStep\030\006 "
      "\002(\002\022\022\n\nnTimeSteps\030\007 \002(\005\0225\n\016startPosition"
      "s\030\010 \003(\0132\035.robogenMessage.StartPosition\022\027"
      "\n\017actuationPeriod\030\t \002(\005\022\027\n\017terrainFricti"
      "on\030\n \002(\002\022\030\n\020sensorNoiseLevel\030\013 \002(\002\022\027\n\017mo"
      "torNoiseLevel\030\014 \002(\002\022\027\n\017capAcceleration\030\r"
      " \002(\010\022\035\n\025maxLinearAcceleration\030\016 \002(\002\022\036\n\026m"
      "axAngularAcceleration\030\017 \002(\002\022#\n\033maxDirect"
      "ionShiftsPerSecond\030\020 \002(\005\022\020\n\010gravityX\030\021 \002"
      "(\002\022\020\n\010gravityY\030\022 \002(\002\022\020\n\010gravityZ\030\023 \002(\002\022\023"
      "\n\013terrainType\030\024 \002(\005\022\025\n\rterrainHeight\030\025 \002"
      "(\002\022\"\n\032terrainHeightFieldFileName\030\026 \002(\t\022\""
      "\n\032disallowObstacleCollisions\030\027 \002(\010\022\035\n\025ob"
      "stacleOverlapPolicy\030\030 \002(\r\"o\n\021EvaluationR"
      "equest\022$\n\005robot\030\001 \002(\0132\025.robogenMessage.R"
      "obot\0224\n\rconfiguration\030\002 \002(\0132\035.robogenMes"
      "sage.SimulatorConf\"e\n\020EvaluationResult\022\n"
      "\n\002id\030\001 \002(\005\022\017\n\007fitness\030\002 \002(\002\022\022\n\nobjective"
      "s\030\003 \003(\002\022\017\n\007endPosX\030\004 \002(\002\022\017\n\007endPosY\030\005 \002("
      "\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2081);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robogen.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robogen_2eproto
namespace robogenMessage {

// ===================================================================

void EvolvableParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvolvableParameter::kParamValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvolvableParameter::EvolvableParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_EvolvableParameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvolvableParameter)
}
EvolvableParameter::EvolvableParameter(const EvolvableParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paramvalue_ = from.paramvalue_;
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvolvableParameter)
}

void EvolvableParameter::SharedCtor() {
  paramvalue_ = 0;
}

EvolvableParameter::~EvolvableParameter() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvolvableParameter)
  SharedDtor();
}

void EvolvableParameter::SharedDtor() {
}

void EvolvableParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EvolvableParameter::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvolvableParameter& EvolvableParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_EvolvableParameter.base);
  return *internal_default_instance();
}


void EvolvableParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.EvolvableParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramvalue_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvolvableParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvolvableParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float paramValue = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_paramvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paramvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvolvableParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvolvableParameter)
  return false;
#undef DO_
}

void EvolvableParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvolvableParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float paramValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->paramvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvolvableParameter)
}

::google::protobuf::uint8* EvolvableParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvolvableParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float paramValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->paramvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvolvableParameter)
  return target;
}

size_t EvolvableParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.EvolvableParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float paramValue = 1;
  if (has_paramvalue()) {
    total_size += 1 + 4;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvolvableParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.EvolvableParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EvolvableParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvolvableParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.EvolvableParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.EvolvableParameter)
    MergeFrom(*source);
  }
}

void EvolvableParameter::MergeFrom(const EvolvableParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.EvolvableParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_paramvalue()) {
    set_paramvalue(from.paramvalue());
  }
}

void EvolvableParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.EvolvableParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolvableParameter::CopyFrom(const EvolvableParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.EvolvableParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvolvableParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EvolvableParameter::Swap(EvolvableParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvolvableParameter::InternalSwap(EvolvableParameter* other) {
  using std::swap;
  swap(paramvalue_, other->paramvalue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EvolvableParameter::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BodyPart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyPart::kIdFieldNumber;
const int BodyPart::kTypeFieldNumber;
const int BodyPart::kRootFieldNumber;
const int BodyPart::kEvolvableParamFieldNumber;
const int BodyPart::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyPart::BodyPart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_BodyPart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.BodyPart)
}
BodyPart::BodyPart(const BodyPart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      evolvableparam_(from.evolvableparam_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&root_, &from.root_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&root_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.BodyPart)
}

void BodyPart::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&root_)) + sizeof(orientation_));
}

BodyPart::~BodyPart() {
  // @@protoc_insertion_point(destructor:robogenMessage.BodyPart)
  SharedDtor();
}

void BodyPart::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BodyPart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BodyPart::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyPart& BodyPart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_BodyPart.base);
  return *internal_default_instance();
}


void BodyPart::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.BodyPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evolvableparam_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&root_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orientation_) -
        reinterpret_cast<char*>(&root_)) + sizeof(orientation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BodyPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.BodyPart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyPart.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyPart.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool root = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_root();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &root_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_evolvableparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 orientation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.BodyPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.BodyPart)
  return false;
#undef DO_
}

void BodyPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.BodyPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required bool root = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->root(), output);
  }

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->evolvableparam_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->evolvableparam(static_cast<int>(i)),
      output);
  }

  // required int32 orientation = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.BodyPart)
}

::google::protobuf::uint8* BodyPart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.BodyPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required bool root = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->root(), target);
  }

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->evolvableparam_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->evolvableparam(static_cast<int>(i)), deterministic, target);
  }

  // required int32 orientation = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.BodyPart)
  return target;
}

size_t BodyPart::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.BodyPart)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_root()) {
    // required bool root = 3;
    total_size += 1 + 1;
  }

  if (has_orientation()) {
    // required int32 orientation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orientation());
  }

  return total_size;
}
size_t BodyPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.BodyPart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required bool root = 3;
    total_size += 1 + 1;

    // required int32 orientation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orientation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->evolvableparam_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->evolvableparam(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyPart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.BodyPart)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyPart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyPart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.BodyPart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.BodyPart)
    MergeFrom(*source);
  }
}

void BodyPart::MergeFrom(const BodyPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.BodyPart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evolvableparam_.MergeFrom(from.evolvableparam_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      root_ = from.root_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BodyPart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.BodyPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyPart::CopyFrom(const BodyPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.BodyPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->evolvableparam())) return false;
  return true;
}

void BodyPart::Swap(BodyPart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyPart::InternalSwap(BodyPart* other) {
  using std::swap;
  CastToBase(&evolvableparam_)->InternalSwap(CastToBase(&other->evolvableparam_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(root_, other->root_);
  swap(orientation_, other->orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BodyPart::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BodyConnection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyConnection::kSrcFieldNumber;
const int BodyConnection::kDestFieldNumber;
const int BodyConnection::kSrcSlotFieldNumber;
const int BodyConnection::kDestSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyConnection::BodyConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_BodyConnection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.BodyConnection)
}
BodyConnection::BodyConnection(const BodyConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src()) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest()) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  ::memcpy(&srcslot_, &from.srcslot_,
    static_cast<size_t>(reinterpret_cast<char*>(&destslot_) -
    reinterpret_cast<char*>(&srcslot_)) + sizeof(destslot_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.BodyConnection)
}

void BodyConnection::SharedCtor() {
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&srcslot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destslot_) -
      reinterpret_cast<char*>(&srcslot_)) + sizeof(destslot_));
}

BodyConnection::~BodyConnection() {
  // @@protoc_insertion_point(destructor:robogenMessage.BodyConnection)
  SharedDtor();
}

void BodyConnection::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BodyConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BodyConnection::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyConnection& BodyConnection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_BodyConnection.base);
  return *internal_default_instance();
}


void BodyConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.BodyConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dest_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&srcslot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destslot_) -
        reinterpret_cast<char*>(&srcslot_)) + sizeof(destslot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BodyConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.BodyConnection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), static_cast<int>(this->src().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyConnection.src");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), static_cast<int>(this->dest().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyConnection.dest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 srcSlot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_srcslot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 destSlot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_destslot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.BodyConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.BodyConnection)
  return false;
#undef DO_
}

void BodyConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.BodyConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // required int32 srcSlot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcslot(), output);
  }

  // required int32 destSlot = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->destslot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.BodyConnection)
}

::google::protobuf::uint8* BodyConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.BodyConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required int32 srcSlot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcslot(), target);
  }

  // required int32 destSlot = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->destslot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.BodyConnection)
  return target;
}

size_t BodyConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.BodyConnection)
  size_t total_size = 0;

  if (has_src()) {
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  if (has_dest()) {
    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  if (has_srcslot()) {
    // required int32 srcSlot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcslot());
  }

  if (has_destslot()) {
    // required int32 destSlot = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destslot());
  }

  return total_size;
}
size_t BodyConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.BodyConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());

    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());

    // required int32 srcSlot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcslot());

    // required int32 destSlot = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destslot());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.BodyConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyConnection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.BodyConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.BodyConnection)
    MergeFrom(*source);
  }
}

void BodyConnection::MergeFrom(const BodyConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.BodyConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src();
      src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest();
      dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (cached_has_bits & 0x00000004u) {
      srcslot_ = from.srcslot_;
    }
    if (cached_has_bits & 0x00000008u) {
      destslot_ = from.destslot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BodyConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.BodyConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyConnection::CopyFrom(const BodyConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.BodyConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void BodyConnection::Swap(BodyConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyConnection::InternalSwap(BodyConnection* other) {
  using std::swap;
  src_.Swap(&other->src_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dest_.Swap(&other->dest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(srcslot_, other->srcslot_);
  swap(destslot_, other->destslot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BodyConnection::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Body::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Body::kPartFieldNumber;
const int Body::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body::Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_Body.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Body)
}
Body::Body(const Body& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      part_(from.part_),
      connection_(from.connection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Body)
}

void Body::SharedCtor() {
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:robogenMessage.Body)
  SharedDtor();
}

void Body::SharedDtor() {
}

void Body::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Body& Body::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_Body.base);
  return *internal_default_instance();
}


void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_.Clear();
  connection_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Body)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robogenMessage.BodyPart part = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_part()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robogenMessage.BodyConnection connection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robogenMessage.BodyPart part = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->part_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->part(static_cast<int>(i)),
      output);
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->connection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Body)
}

::google::protobuf::uint8* Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robogenMessage.BodyPart part = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->part_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->part(static_cast<int>(i)), deterministic, target);
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->connection(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Body)
  return target;
}

size_t Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Body)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .robogenMessage.BodyPart part = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->part_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->part(static_cast<int>(i)));
    }
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->connection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connection(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Body)
  GOOGLE_DCHECK_NE(&from, this);
  const Body* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Body)
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Body)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  part_.MergeFrom(from.part_);
  connection_.MergeFrom(from.connection_);
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->part())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void Body::Swap(Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body::InternalSwap(Body* other) {
  using std::swap;
  CastToBase(&part_)->InternalSwap(CastToBase(&other->part_));
  CastToBase(&connection_)->InternalSwap(CastToBase(&other->connection_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NeuralConnection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeuralConnection::kSrcFieldNumber;
const int NeuralConnection::kDestFieldNumber;
const int NeuralConnection::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeuralConnection::NeuralConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_NeuralConnection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.NeuralConnection)
}
NeuralConnection::NeuralConnection(const NeuralConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src()) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest()) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:robogenMessage.NeuralConnection)
}

void NeuralConnection::SharedCtor() {
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
}

NeuralConnection::~NeuralConnection() {
  // @@protoc_insertion_point(destructor:robogenMessage.NeuralConnection)
  SharedDtor();
}

void NeuralConnection::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NeuralConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NeuralConnection::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeuralConnection& NeuralConnection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_NeuralConnection.base);
  return *internal_default_instance();
}


void NeuralConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.NeuralConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dest_.ClearNonDefaultToEmptyNoArena();
    }
  }
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NeuralConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.NeuralConnection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), static_cast<int>(this->src().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.NeuralConnection.src");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), static_cast<int>(this->dest().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.NeuralConnection.dest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.NeuralConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.NeuralConnection)
  return false;
#undef DO_
}

void NeuralConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.NeuralConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // required float weight = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.NeuralConnection)
}

::google::protobuf::uint8* NeuralConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.NeuralConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required float weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.NeuralConnection)
  return target;
}

size_t NeuralConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.NeuralConnection)
  size_t total_size = 0;

  if (has_src()) {
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  if (has_dest()) {
    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  if (has_weight()) {
    // required float weight = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t NeuralConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.NeuralConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());

    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());

    // required float weight = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeuralConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.NeuralConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const NeuralConnection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeuralConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.NeuralConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.NeuralConnection)
    MergeFrom(*source);
  }
}

void NeuralConnection::MergeFrom(const NeuralConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.NeuralConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src();
      src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest();
      dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NeuralConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.NeuralConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuralConnection::CopyFrom(const NeuralConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.NeuralConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuralConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void NeuralConnection::Swap(NeuralConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeuralConnection::InternalSwap(NeuralConnection* other) {
  using std::swap;
  src_.Swap(&other->src_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dest_.Swap(&other->dest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weight_, other->weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NeuralConnection::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Neuron::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neuron::kIdFieldNumber;
const int Neuron::kLayerFieldNumber;
const int Neuron::kTypeFieldNumber;
const int Neuron::kBiasFieldNumber;
const int Neuron::kBodyPartIdFieldNumber;
const int Neuron::kIoIdFieldNumber;
const int Neuron::kTauFieldNumber;
const int Neuron::kPhaseOffsetFieldNumber;
const int Neuron::kPeriodFieldNumber;
const int Neuron::kGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neuron::Neuron()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_Neuron.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Neuron)
}
Neuron::Neuron(const Neuron& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer()) {
    layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  bodypartid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bodypartid()) {
    bodypartid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodypartid_);
  }
  ::memcpy(&bias_, &from.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&bias_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Neuron)
}

void Neuron::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodypartid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(gain_));
}

Neuron::~Neuron() {
  // @@protoc_insertion_point(destructor:robogenMessage.Neuron)
  SharedDtor();
}

void Neuron::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodypartid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Neuron::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Neuron::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Neuron& Neuron::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_Neuron.base);
  return *internal_default_instance();
}


void Neuron::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Neuron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      layer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      bodypartid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&bias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phaseoffset_) -
        reinterpret_cast<char*>(&bias_)) + sizeof(phaseoffset_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gain_) -
        reinterpret_cast<char*>(&period_)) + sizeof(gain_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Neuron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Neuron)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), static_cast<int>(this->layer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bodyPartId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodypartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bodypartid().data(), static_cast<int>(this->bodypartid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.bodyPartId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ioId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ioid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tau = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_tau();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float phaseOffset = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_phaseoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phaseoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float period = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gain = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Neuron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Neuron)
  return false;
#undef DO_
}

void Neuron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Neuron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), static_cast<int>(this->layer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // required string type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional float bias = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bias(), output);
  }

  // optional string bodyPartId = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodypartid().data(), static_cast<int>(this->bodypartid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.bodyPartId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bodypartid(), output);
  }

  // optional int32 ioId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ioid(), output);
  }

  // optional float tau = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tau(), output);
  }

  // optional float phaseOffset = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phaseoffset(), output);
  }

  // optional float period = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->period(), output);
  }

  // optional float gain = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Neuron)
}

::google::protobuf::uint8* Neuron::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Neuron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), static_cast<int>(this->layer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // required string type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional float bias = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bias(), target);
  }

  // optional string bodyPartId = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodypartid().data(), static_cast<int>(this->bodypartid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.bodyPartId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bodypartid(), target);
  }

  // optional int32 ioId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ioid(), target);
  }

  // optional float tau = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tau(), target);
  }

  // optional float phaseOffset = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phaseoffset(), target);
  }

  // optional float period = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->period(), target);
  }

  // optional float gain = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Neuron)
  return target;
}

size_t Neuron::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Neuron)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_layer()) {
    // required string layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());
  }

  if (has_type()) {
    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
size_t Neuron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Neuron)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());

    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string bodyPartId = 5;
    if (has_bodypartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodypartid());
    }

    // optional float bias = 4;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional int32 ioId = 6;
    if (has_ioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioid());
    }

    // optional float tau = 7;
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float phaseOffset = 8;
    if (has_phaseoffset()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float period = 9;
    if (has_period()) {
      total_size += 1 + 4;
    }

    // optional float gain = 10;
    if (has_gain()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Neuron::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Neuron)
  GOOGLE_DCHECK_NE(&from, this);
  const Neuron* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Neuron>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Neuron)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Neuron)
    MergeFrom(*source);
  }
}

void Neuron::MergeFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Neuron)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bodypartid();
      bodypartid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodypartid_);
    }
    if (cached_has_bits & 0x00000010u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000020u) {
      ioid_ = from.ioid_;
    }
    if (cached_has_bits & 0x00000040u) {
      tau_ = from.tau_;
    }
    if (cached_has_bits & 0x00000080u) {
      phaseoffset_ = from.phaseoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      period_ = from.period_;
    }
    if (cached_has_bits & 0x00000200u) {
      gain_ = from.gain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Neuron::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neuron::CopyFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neuron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Neuron::Swap(Neuron* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neuron::InternalSwap(Neuron* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  layer_.Swap(&other->layer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bodypartid_.Swap(&other->bodypartid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bias_, other->bias_);
  swap(ioid_, other->ioid_);
  swap(tau_, other->tau_);
  swap(phaseoffset_, other->phaseoffset_);
  swap(period_, other->period_);
  swap(gain_, other->gain_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Neuron::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brain::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brain::kNeuronFieldNumber;
const int Brain::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brain::Brain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_Brain.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Brain)
}
Brain::Brain(const Brain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      neuron_(from.neuron_),
      connection_(from.connection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Brain)
}

void Brain::SharedCtor() {
}

Brain::~Brain() {
  // @@protoc_insertion_point(destructor:robogenMessage.Brain)
  SharedDtor();
}

void Brain::SharedDtor() {
}

void Brain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brain::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brain& Brain::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_Brain.base);
  return *internal_default_instance();
}


void Brain::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Brain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neuron_.Clear();
  connection_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Brain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robogenMessage.Neuron neuron = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_neuron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robogenMessage.NeuralConnection connection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Brain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Brain)
  return false;
#undef DO_
}

void Brain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Brain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robogenMessage.Neuron neuron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neuron_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->neuron(static_cast<int>(i)),
      output);
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->connection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Brain)
}

::google::protobuf::uint8* Brain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Brain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robogenMessage.Neuron neuron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neuron_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->neuron(static_cast<int>(i)), deterministic, target);
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->connection(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Brain)
  return target;
}

size_t Brain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Brain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .robogenMessage.Neuron neuron = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->neuron_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->neuron(static_cast<int>(i)));
    }
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->connection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connection(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Brain)
  GOOGLE_DCHECK_NE(&from, this);
  const Brain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Brain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Brain)
    MergeFrom(*source);
  }
}

void Brain::MergeFrom(const Brain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Brain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neuron_.MergeFrom(from.neuron_);
  connection_.MergeFrom(from.connection_);
}

void Brain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Brain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brain::CopyFrom(const Brain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Brain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brain::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->neuron())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void Brain::Swap(Brain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brain::InternalSwap(Brain* other) {
  using std::swap;
  CastToBase(&neuron_)->InternalSwap(CastToBase(&other->neuron_));
  CastToBase(&connection_)->InternalSwap(CastToBase(&other->connection_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brain::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
  ::robogenMessage::_Robot_default_instance_._instance.get_mutable()->body_ = const_cast< ::robogenMessage::Body*>(
      ::robogenMessage::Body::internal_default_instance());
  ::robogenMessage::_Robot_default_instance_._instance.get_mutable()->brain_ = const_cast< ::robogenMessage::Brain*>(
      ::robogenMessage::Brain::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kIdFieldNumber;
const int Robot::kBodyFieldNumber;
const int Robot::kBrainFieldNumber;
const int Robot::kComplexityFieldNumber;
const int Robot::kComplexityCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_Robot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_body()) {
    body_ = new ::robogenMessage::Body(*from.body_);
  } else {
    body_ = NULL;
  }
  if (from.has_brain()) {
    brain_ = new ::robogenMessage::Brain(*from.brain_);
  } else {
    brain_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&complexitycost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(complexitycost_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Robot)
}

void Robot::SharedCtor() {
  ::memset(&body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complexitycost_) -
      reinterpret_cast<char*>(&body_)) + sizeof(complexitycost_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:robogenMessage.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != internal_default_instance()) delete body_;
  if (this != internal_default_instance()) delete brain_;
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_Robot.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(body_ != NULL);
      body_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brain_ != NULL);
      brain_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&complexitycost_) -
        reinterpret_cast<char*>(&id_)) + sizeof(complexitycost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Robot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .robogenMessage.Body body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .robogenMessage.Brain brain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float complexity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_complexity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &complexity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float complexityCost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_complexitycost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &complexitycost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .robogenMessage.Body body = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_body(), output);
  }

  // required .robogenMessage.Brain brain = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_brain(), output);
  }

  // required float complexity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->complexity(), output);
  }

  // required float complexityCost = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->complexitycost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .robogenMessage.Body body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_body(), deterministic, target);
  }

  // required .robogenMessage.Brain brain = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_brain(), deterministic, target);
  }

  // required float complexity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->complexity(), target);
  }

  // required float complexityCost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->complexitycost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Robot)
  return target;
}

size_t Robot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Robot)
  size_t total_size = 0;

  if (has_body()) {
    // required .robogenMessage.Body body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (has_brain()) {
    // required .robogenMessage.Brain brain = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brain_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_complexity()) {
    // required float complexity = 4;
    total_size += 1 + 4;
  }

  if (has_complexitycost()) {
    // required float complexityCost = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .robogenMessage.Body body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);

    // required .robogenMessage.Brain brain = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brain_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float complexity = 4;
    total_size += 1 + 4;

    // required float complexityCost = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_body()->::robogenMessage::Body::MergeFrom(from.body());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_brain()->::robogenMessage::Brain::MergeFrom(from.brain());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      complexity_ = from.complexity_;
    }
    if (cached_has_bits & 0x00000010u) {
      complexitycost_ = from.complexitycost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_body()) {
    if (!this->body_->IsInitialized()) return false;
  }
  if (has_brain()) {
    if (!this->brain_->IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  swap(body_, other->body_);
  swap(brain_, other->brain_);
  swap(id_, other->id_);
  swap(complexity_, other->complexity_);
  swap(complexitycost_, other->complexitycost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle::kXFieldNumber;
const int Obstacle::kYFieldNumber;
const int Obstacle::kZFieldNumber;
const int Obstacle::kXSizeFieldNumber;
const int Obstacle::kYSizeFieldNumber;
const int Obstacle::kZSizeFieldNumber;
const int Obstacle::kDensityFieldNumber;
const int Obstacle::kXRotationFieldNumber;
const int Obstacle::kYRotationFieldNumber;
const int Obstacle::kZRotationFieldNumber;
const int Obstacle::kRotationAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle::Obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_Obstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationangle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Obstacle)
}

void Obstacle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationangle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rotationangle_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:robogenMessage.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
}

void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacle& Obstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_Obstacle.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xrotation_) -
        reinterpret_cast<char*>(&x_)) + sizeof(xrotation_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&yrotation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotationangle_) -
        reinterpret_cast<char*>(&yrotation_)) + sizeof(rotationangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Obstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float xSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_xsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ySize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_ysize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float zSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_zsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float density = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float xRotation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_xrotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xrotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float yRotation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_yrotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yrotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float zRotation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_zrotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zrotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotationAngle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_rotationangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float xSize = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->xsize(), output);
  }

  // required float ySize = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ysize(), output);
  }

  // required float zSize = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zsize(), output);
  }

  // required float density = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->density(), output);
  }

  // required float xRotation = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xrotation(), output);
  }

  // required float yRotation = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->yrotation(), output);
  }

  // required float zRotation = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->zrotation(), output);
  }

  // required float rotationAngle = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rotationangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Obstacle)
}

::google::protobuf::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float xSize = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->xsize(), target);
  }

  // required float ySize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ysize(), target);
  }

  // required float zSize = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zsize(), target);
  }

  // required float density = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->density(), target);
  }

  // required float xRotation = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xrotation(), target);
  }

  // required float yRotation = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->yrotation(), target);
  }

  // required float zRotation = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->zrotation(), target);
  }

  // required float rotationAngle = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rotationangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Obstacle)
  return target;
}

size_t Obstacle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Obstacle)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_xsize()) {
    // required float xSize = 4;
    total_size += 1 + 4;
  }

  if (has_ysize()) {
    // required float ySize = 5;
    total_size += 1 + 4;
  }

  if (has_zsize()) {
    // required float zSize = 6;
    total_size += 1 + 4;
  }

  if (has_density()) {
    // required float density = 7;
    total_size += 1 + 4;
  }

  if (has_xrotation()) {
    // required float xRotation = 8;
    total_size += 1 + 4;
  }

  if (has_yrotation()) {
    // required float yRotation = 9;
    total_size += 1 + 4;
  }

  if (has_zrotation()) {
    // required float zRotation = 10;
    total_size += 1 + 4;
  }

  if (has_rotationangle()) {
    // required float rotationAngle = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Obstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float xSize = 4;
    total_size += 1 + 4;

    // required float ySize = 5;
    total_size += 1 + 4;

    // required float zSize = 6;
    total_size += 1 + 4;

    // required float density = 7;
    total_size += 1 + 4;

    // required float xRotation = 8;
    total_size += 1 + 4;

    // required float yRotation = 9;
    total_size += 1 + 4;

    // required float zRotation = 10;
    total_size += 1 + 4;

    // required float rotationAngle = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      xsize_ = from.xsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      ysize_ = from.ysize_;
    }
    if (cached_has_bits & 0x00000020u) {
      zsize_ = from.zsize_;
    }
    if (cached_has_bits & 0x00000040u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000080u) {
      xrotation_ = from.xrotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      yrotation_ = from.yrotation_;
    }
    if (cached_has_bits & 0x00000200u) {
      zrotation_ = from.zrotation_;
    }
    if (cached_has_bits & 0x00000400u) {
      rotationangle_ = from.rotationangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(xsize_, other->xsize_);
  swap(ysize_, other->ysize_);
  swap(zsize_, other->zsize_);
  swap(density_, other->density_);
  swap(xrotation_, other->xrotation_);
  swap(yrotation_, other->yrotation_);
  swap(zrotation_, other->zrotation_);
  swap(rotationangle_, other->rotationangle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LightSource::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightSource::kXFieldNumber;
const int LightSource::kYFieldNumber;
const int LightSource::kZFieldNumber;
const int LightSource::kIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightSource::LightSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_LightSource.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.LightSource)
}
LightSource::LightSource(const LightSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.LightSource)
}

void LightSource::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
}

LightSource::~LightSource() {
  // @@protoc_insertion_point(destructor:robogenMessage.LightSource)
  SharedDtor();
}

void LightSource::SharedDtor() {
}

void LightSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LightSource::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LightSource& LightSource::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_LightSource.base);
  return *internal_default_instance();
}


void LightSource::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.LightSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&intensity_) -
        reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LightSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.LightSource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float intensity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_intensity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.LightSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.LightSource)
  return false;
#undef DO_
}

void LightSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.LightSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float intensity = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->intensity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.LightSource)
}

::google::protobuf::uint8* LightSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.LightSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float intensity = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->intensity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.LightSource)
  return target;
}

size_t LightSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.LightSource)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_intensity()) {
    // required float intensity = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LightSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.LightSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float intensity = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.LightSource)
  GOOGLE_DCHECK_NE(&from, this);
  const LightSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LightSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.LightSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.LightSource)
    MergeFrom(*source);
  }
}

void LightSource::MergeFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.LightSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      intensity_ = from.intensity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSource::CopyFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void LightSource::Swap(LightSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightSource::InternalSwap(LightSource* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(intensity_, other->intensity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LightSource::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartPosition::kXFieldNumber;
const int StartPosition::kYFieldNumber;
const int StartPosition::kAzimuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartPosition::StartPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_StartPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.StartPosition)
}
StartPosition::StartPosition(const StartPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&azimuth_) -
    reinterpret_cast<char*>(&x_)) + sizeof(azimuth_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.StartPosition)
}

void StartPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&x_)) + sizeof(azimuth_));
}

StartPosition::~StartPosition() {
  // @@protoc_insertion_point(destructor:robogenMessage.StartPosition)
  SharedDtor();
}

void StartPosition::SharedDtor() {
}

void StartPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartPosition::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartPosition& StartPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_StartPosition.base);
  return *internal_default_instance();
}


void StartPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.StartPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&azimuth_) -
        reinterpret_cast<char*>(&x_)) + sizeof(azimuth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.StartPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float azimuth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_azimuth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.StartPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.StartPosition)
  return false;
#undef DO_
}

void StartPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.StartPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float azimuth = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azimuth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.StartPosition)
}

::google::protobuf::uint8* StartPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.StartPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float azimuth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azimuth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.StartPosition)
  return target;
}

size_t StartPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.StartPosition)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_azimuth()) {
    // required float azimuth = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t StartPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.StartPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float azimuth = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.StartPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const StartPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.StartPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.StartPosition)
    MergeFrom(*source);
  }
}

void StartPosition::MergeFrom(const StartPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.StartPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      azimuth_ = from.azimuth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.StartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPosition::CopyFrom(const StartPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.StartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void StartPosition::Swap(StartPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartPosition::InternalSwap(StartPosition* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(azimuth_, other->azimuth_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartPosition::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimulatorConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulatorConf::kTerrainWidthFieldNumber;
const int SimulatorConf::kTerrainLengthFieldNumber;
const int SimulatorConf::kObstaclesFieldNumber;
const int SimulatorConf::kScenarioFieldNumber;
const int SimulatorConf::kLightSourcesFieldNumber;
const int SimulatorConf::kTimeStepFieldNumber;
const int SimulatorConf::kNTimeStepsFieldNumber;
const int SimulatorConf::kStartPositionsFieldNumber;
const int SimulatorConf::kActuationPeriodFieldNumber;
const int SimulatorConf::kTerrainFrictionFieldNumber;
const int SimulatorConf::kSensorNoiseLevelFieldNumber;
const int SimulatorConf::kMotorNoiseLevelFieldNumber;
const int SimulatorConf::kCapAccelerationFieldNumber;
const int SimulatorConf::kMaxLinearAccelerationFieldNumber;
const int SimulatorConf::kMaxAngularAccelerationFieldNumber;
const int SimulatorConf::kMaxDirectionShiftsPerSecondFieldNumber;
const int SimulatorConf::kGravityXFieldNumber;
const int SimulatorConf::kGravityYFieldNumber;
const int SimulatorConf::kGravityZFieldNumber;
const int SimulatorConf::kTerrainTypeFieldNumber;
const int SimulatorConf::kTerrainHeightFieldNumber;
const int SimulatorConf::kTerrainHeightFieldFileNameFieldNumber;
const int SimulatorConf::kDisallowObstacleCollisionsFieldNumber;
const int SimulatorConf::kObstacleOverlapPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulatorConf::SimulatorConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_SimulatorConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.SimulatorConf)
}
SimulatorConf::SimulatorConf(const SimulatorConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_),
      lightsources_(from.lightsources_),
      startpositions_(from.startpositions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scenario()) {
    scenario_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scenario_);
  }
  terrainheightfieldfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_terrainheightfieldfilename()) {
    terrainheightfieldfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terrainheightfieldfilename_);
  }
  ::memcpy(&terrainwidth_, &from.terrainwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacleoverlappolicy_) -
    reinterpret_cast<char*>(&terrainwidth_)) + sizeof(obstacleoverlappolicy_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.SimulatorConf)
}

void SimulatorConf::SharedCtor() {
  scenario_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terrainheightfieldfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&terrainwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacleoverlappolicy_) -
      reinterpret_cast<char*>(&terrainwidth_)) + sizeof(obstacleoverlappolicy_));
}

SimulatorConf::~SimulatorConf() {
  // @@protoc_insertion_point(destructor:robogenMessage.SimulatorConf)
  SharedDtor();
}

void SimulatorConf::SharedDtor() {
  scenario_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terrainheightfieldfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimulatorConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimulatorConf::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimulatorConf& SimulatorConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_SimulatorConf.base);
  return *internal_default_instance();
}


void SimulatorConf::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.SimulatorConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  lightsources_.Clear();
  startpositions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      scenario_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      terrainheightfieldfilename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&terrainwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&terrainfriction_) -
        reinterpret_cast<char*>(&terrainwidth_)) + sizeof(terrainfriction_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&sensornoiselevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capacceleration_) -
        reinterpret_cast<char*>(&sensornoiselevel_)) + sizeof(capacceleration_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&disallowobstaclecollisions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacleoverlappolicy_) -
        reinterpret_cast<char*>(&disallowobstaclecollisions_)) + sizeof(obstacleoverlappolicy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimulatorConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.SimulatorConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float terrainWidth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_terrainwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float terrainLength = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_terrainlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robogenMessage.Obstacle obstacles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string scenario = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenario()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenario().data(), static_cast<int>(this->scenario().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.SimulatorConf.scenario");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robogenMessage.LightSource lightSources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lightsources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float timeStep = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_timestep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nTimeSteps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ntimesteps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntimesteps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robogenMessage.StartPosition startPositions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_startpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 actuationPeriod = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_actuationperiod();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actuationperiod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float terrainFriction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_terrainfriction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainfriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float sensorNoiseLevel = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_sensornoiselevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensornoiselevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float motorNoiseLevel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_motornoiselevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motornoiselevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool capAcceleration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_capacceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxLinearAcceleration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_maxlinearacceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlinearacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxAngularAcceleration = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_maxangularacceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxangularacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 maxDirectionShiftsPerSecond = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_maxdirectionshiftspersecond();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdirectionshiftspersecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gravityX = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_gravityx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gravityY = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_gravityy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gravityZ = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_gravityz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 terrainType = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_terraintype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terraintype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float terrainHeight = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_terrainheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string terrainHeightFieldFileName = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_terrainheightfieldfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->terrainheightfieldfilename().data(), static_cast<int>(this->terrainheightfieldfilename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.SimulatorConf.terrainHeightFieldFileName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool disallowObstacleCollisions = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_disallowobstaclecollisions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disallowobstaclecollisions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 obstacleOverlapPolicy = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_obstacleoverlappolicy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obstacleoverlappolicy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.SimulatorConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.SimulatorConf)
  return false;
#undef DO_
}

void SimulatorConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.SimulatorConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float terrainWidth = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->terrainwidth(), output);
  }

  // required float terrainLength = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->terrainlength(), output);
  }

  // repeated .robogenMessage.Obstacle obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  // required string scenario = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario().data(), static_cast<int>(this->scenario().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.scenario");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scenario(), output);
  }

  // repeated .robogenMessage.LightSource lightSources = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lightsources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->lightsources(static_cast<int>(i)),
      output);
  }

  // required float timeStep = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->timestep(), output);
  }

  // required int32 nTimeSteps = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ntimesteps(), output);
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startpositions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->startpositions(static_cast<int>(i)),
      output);
  }

  // required int32 actuationPeriod = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->actuationperiod(), output);
  }

  // required float terrainFriction = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->terrainfriction(), output);
  }

  // required float sensorNoiseLevel = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sensornoiselevel(), output);
  }

  // required float motorNoiseLevel = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->motornoiselevel(), output);
  }

  // required bool capAcceleration = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->capacceleration(), output);
  }

  // required float maxLinearAcceleration = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->maxlinearacceleration(), output);
  }

  // required float maxAngularAcceleration = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->maxangularacceleration(), output);
  }

  // required int32 maxDirectionShiftsPerSecond = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxdirectionshiftspersecond(), output);
  }

  // required float gravityX = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->gravityx(), output);
  }

  // required float gravityY = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->gravityy(), output);
  }

  // required float gravityZ = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->gravityz(), output);
  }

  // required int32 terrainType = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->terraintype(), output);
  }

  // required float terrainHeight = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->terrainheight(), output);
  }

  // required string terrainHeightFieldFileName = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terrainheightfieldfilename().data(), static_cast<int>(this->terrainheightfieldfilename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.terrainHeightFieldFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->terrainheightfieldfilename(), output);
  }

  // required bool disallowObstacleCollisions = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->disallowobstaclecollisions(), output);
  }

  // required uint32 obstacleOverlapPolicy = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->obstacleoverlappolicy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.SimulatorConf)
}

::google::protobuf::uint8* SimulatorConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.SimulatorConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float terrainWidth = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->terrainwidth(), target);
  }

  // required float terrainLength = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->terrainlength(), target);
  }

  // repeated .robogenMessage.Obstacle obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->obstacles(static_cast<int>(i)), deterministic, target);
  }

  // required string scenario = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario().data(), static_cast<int>(this->scenario().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.scenario");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scenario(), target);
  }

  // repeated .robogenMessage.LightSource lightSources = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lightsources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->lightsources(static_cast<int>(i)), deterministic, target);
  }

  // required float timeStep = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->timestep(), target);
  }

  // required int32 nTimeSteps = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ntimesteps(), target);
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startpositions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->startpositions(static_cast<int>(i)), deterministic, target);
  }

  // required int32 actuationPeriod = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->actuationperiod(), target);
  }

  // required float terrainFriction = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->terrainfriction(), target);
  }

  // required float sensorNoiseLevel = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sensornoiselevel(), target);
  }

  // required float motorNoiseLevel = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->motornoiselevel(), target);
  }

  // required bool capAcceleration = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->capacceleration(), target);
  }

  // required float maxLinearAcceleration = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->maxlinearacceleration(), target);
  }

  // required float maxAngularAcceleration = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->maxangularacceleration(), target);
  }

  // required int32 maxDirectionShiftsPerSecond = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxdirectionshiftspersecond(), target);
  }

  // required float gravityX = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->gravityx(), target);
  }

  // required float gravityY = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->gravityy(), target);
  }

  // required float gravityZ = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->gravityz(), target);
  }

  // required int32 terrainType = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->terraintype(), target);
  }

  // required float terrainHeight = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->terrainheight(), target);
  }

  // required string terrainHeightFieldFileName = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terrainheightfieldfilename().data(), static_cast<int>(this->terrainheightfieldfilename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.terrainHeightFieldFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->terrainheightfieldfilename(), target);
  }

  // required bool disallowObstacleCollisions = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->disallowobstaclecollisions(), target);
  }

  // required uint32 obstacleOverlapPolicy = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->obstacleoverlappolicy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.SimulatorConf)
  return target;
}

size_t SimulatorConf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.SimulatorConf)
  size_t total_size = 0;

  if (has_scenario()) {
    // required string scenario = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scenario());
  }

  if (has_terrainheightfieldfilename()) {
    // required string terrainHeightFieldFileName = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->terrainheightfieldfilename());
  }

  if (has_terrainwidth()) {
    // required float terrainWidth = 1;
    total_size += 1 + 4;
  }

  if (has_terrainlength()) {
    // required float terrainLength = 2;
    total_size += 1 + 4;
  }

  if (has_timestep()) {
    // required float timeStep = 6;
    total_size += 1 + 4;
  }

  if (has_ntimesteps()) {
    // required int32 nTimeSteps = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntimesteps());
  }

  if (has_actuationperiod()) {
    // required int32 actuationPeriod = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actuationperiod());
  }

  if (has_terrainfriction()) {
    // required float terrainFriction = 10;
    total_size += 1 + 4;
  }

  if (has_sensornoiselevel()) {
    // required float sensorNoiseLevel = 11;
    total_size += 1 + 4;
  }

  if (has_motornoiselevel()) {
    // required float motorNoiseLevel = 12;
    total_size += 1 + 4;
  }

  if (has_maxlinearacceleration()) {
    // required float maxLinearAcceleration = 14;
    total_size += 1 + 4;
  }

  if (has_maxangularacceleration()) {
    // required float maxAngularAcceleration = 15;
    total_size += 1 + 4;
  }

  if (has_maxdirectionshiftspersecond()) {
    // required int32 maxDirectionShiftsPerSecond = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxdirectionshiftspersecond());
  }

  if (has_gravityx()) {
    // required float gravityX = 17;
    total_size += 2 + 4;
  }

  if (has_gravityy()) {
    // required float gravityY = 18;
    total_size += 2 + 4;
  }

  if (has_capacceleration()) {
    // required bool capAcceleration = 13;
    total_size += 1 + 1;
  }

  if (has_disallowobstaclecollisions()) {
    // required bool disallowObstacleCollisions = 23;
    total_size += 2 + 1;
  }

  if (has_gravityz()) {
    // required float gravityZ = 19;
    total_size += 2 + 4;
  }

  if (has_terraintype()) {
    // required int32 terrainType = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->terraintype());
  }

  if (has_terrainheight()) {
    // required float terrainHeight = 21;
    total_size += 2 + 4;
  }

  if (has_obstacleoverlappolicy()) {
    // required uint32 obstacleOverlapPolicy = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obstacleoverlappolicy());
  }

  return total_size;
}
size_t SimulatorConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.SimulatorConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x001fffff) ^ 0x001fffff) == 0) {  // All required fields are present.
    // required string scenario = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scenario());

    // required string terrainHeightFieldFileName = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->terrainheightfieldfilename());

    // required float terrainWidth = 1;
    total_size += 1 + 4;

    // required float terrainLength = 2;
    total_size += 1 + 4;

    // required float timeStep = 6;
    total_size += 1 + 4;

    // required int32 nTimeSteps = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntimesteps());

    // required int32 actuationPeriod = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actuationperiod());

    // required float terrainFriction = 10;
    total_size += 1 + 4;

    // required float sensorNoiseLevel = 11;
    total_size += 1 + 4;

    // required float motorNoiseLevel = 12;
    total_size += 1 + 4;

    // required float maxLinearAcceleration = 14;
    total_size += 1 + 4;

    // required float maxAngularAcceleration = 15;
    total_size += 1 + 4;

    // required int32 maxDirectionShiftsPerSecond = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxdirectionshiftspersecond());

    // required float gravityX = 17;
    total_size += 2 + 4;

    // required float gravityY = 18;
    total_size += 2 + 4;

    // required bool capAcceleration = 13;
    total_size += 1 + 1;

    // required bool disallowObstacleCollisions = 23;
    total_size += 2 + 1;

    // required float gravityZ = 19;
    total_size += 2 + 4;

    // required int32 terrainType = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->terraintype());

    // required float terrainHeight = 21;
    total_size += 2 + 4;

    // required uint32 obstacleOverlapPolicy = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obstacleoverlappolicy());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .robogenMessage.Obstacle obstacles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // repeated .robogenMessage.LightSource lightSources = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->lightsources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lightsources(static_cast<int>(i)));
    }
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->startpositions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->startpositions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.SimulatorConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulatorConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.SimulatorConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.SimulatorConf)
    MergeFrom(*source);
  }
}

void SimulatorConf::MergeFrom(const SimulatorConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.SimulatorConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  lightsources_.MergeFrom(from.lightsources_);
  startpositions_.MergeFrom(from.startpositions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_scenario();
      scenario_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scenario_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_terrainheightfieldfilename();
      terrainheightfieldfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terrainheightfieldfilename_);
    }
    if (cached_has_bits & 0x00000004u) {
      terrainwidth_ = from.terrainwidth_;
    }
    if (cached_has_bits & 0x00000008u) {
      terrainlength_ = from.terrainlength_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestep_ = from.timestep_;
    }
    if (cached_has_bits & 0x00000020u) {
      ntimesteps_ = from.ntimesteps_;
    }
    if (cached_has_bits & 0x00000040u) {
      actuationperiod_ = from.actuationperiod_;
    }
    if (cached_has_bits & 0x00000080u) {
      terrainfriction_ = from.terrainfriction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sensornoiselevel_ = from.sensornoiselevel_;
    }
    if (cached_has_bits & 0x00000200u) {
      motornoiselevel_ = from.motornoiselevel_;
    }
    if (cached_has_bits & 0x00000400u) {
      maxlinearacceleration_ = from.maxlinearacceleration_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxangularacceleration_ = from.maxangularacceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxdirectionshiftspersecond_ = from.maxdirectionshiftspersecond_;
    }
    if (cached_has_bits & 0x00002000u) {
      gravityx_ = from.gravityx_;
    }
    if (cached_has_bits & 0x00004000u) {
      gravityy_ = from.gravityy_;
    }
    if (cached_has_bits & 0x00008000u) {
      capacceleration_ = from.capacceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      disallowobstaclecollisions_ = from.disallowobstaclecollisions_;
    }
    if (cached_has_bits & 0x00020000u) {
      gravityz_ = from.gravityz_;
    }
    if (cached_has_bits & 0x00040000u) {
      terraintype_ = from.terraintype_;
    }
    if (cached_has_bits & 0x00080000u) {
      terrainheight_ = from.terrainheight_;
    }
    if (cached_has_bits & 0x00100000u) {
      obstacleoverlappolicy_ = from.obstacleoverlappolicy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.SimulatorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorConf::CopyFrom(const SimulatorConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.SimulatorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lightsources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->startpositions())) return false;
  return true;
}

void SimulatorConf::Swap(SimulatorConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulatorConf::InternalSwap(SimulatorConf* other) {
  using std::swap;
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  CastToBase(&lightsources_)->InternalSwap(CastToBase(&other->lightsources_));
  CastToBase(&startpositions_)->InternalSwap(CastToBase(&other->startpositions_));
  scenario_.Swap(&other->scenario_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  terrainheightfieldfilename_.Swap(&other->terrainheightfieldfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(terrainwidth_, other->terrainwidth_);
  swap(terrainlength_, other->terrainlength_);
  swap(timestep_, other->timestep_);
  swap(ntimesteps_, other->ntimesteps_);
  swap(actuationperiod_, other->actuationperiod_);
  swap(terrainfriction_, other->terrainfriction_);
  swap(sensornoiselevel_, other->sensornoiselevel_);
  swap(motornoiselevel_, other->motornoiselevel_);
  swap(maxlinearacceleration_, other->maxlinearacceleration_);
  swap(maxangularacceleration_, other->maxangularacceleration_);
  swap(maxdirectionshiftspersecond_, other->maxdirectionshiftspersecond_);
  swap(gravityx_, other->gravityx_);
  swap(gravityy_, other->gravityy_);
  swap(capacceleration_, other->capacceleration_);
  swap(disallowobstaclecollisions_, other->disallowobstaclecollisions_);
  swap(gravityz_, other->gravityz_);
  swap(terraintype_, other->terraintype_);
  swap(terrainheight_, other->terrainheight_);
  swap(obstacleoverlappolicy_, other->obstacleoverlappolicy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimulatorConf::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EvaluationRequest::InitAsDefaultInstance() {
  ::robogenMessage::_EvaluationRequest_default_instance_._instance.get_mutable()->robot_ = const_cast< ::robogenMessage::Robot*>(
      ::robogenMessage::Robot::internal_default_instance());
  ::robogenMessage::_EvaluationRequest_default_instance_._instance.get_mutable()->configuration_ = const_cast< ::robogenMessage::SimulatorConf*>(
      ::robogenMessage::SimulatorConf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluationRequest::kRobotFieldNumber;
const int EvaluationRequest::kConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluationRequest::EvaluationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_EvaluationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvaluationRequest)
}
EvaluationRequest::EvaluationRequest(const EvaluationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_robot()) {
    robot_ = new ::robogenMessage::Robot(*from.robot_);
  } else {
    robot_ = NULL;
  }
  if (from.has_configuration()) {
    configuration_ = new ::robogenMessage::SimulatorConf(*from.configuration_);
  } else {
    configuration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvaluationRequest)
}

void EvaluationRequest::SharedCtor() {
  ::memset(&robot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configuration_) -
      reinterpret_cast<char*>(&robot_)) + sizeof(configuration_));
}

EvaluationRequest::~EvaluationRequest() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvaluationRequest)
  SharedDtor();
}

void EvaluationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete configuration_;
}

void EvaluationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EvaluationRequest::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvaluationRequest& EvaluationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_EvaluationRequest.base);
  return *internal_default_instance();
}


void EvaluationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.EvaluationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != NULL);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(configuration_ != NULL);
      configuration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvaluationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvaluationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .robogenMessage.Robot robot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .robogenMessage.SimulatorConf configuration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvaluationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvaluationRequest)
  return false;
#undef DO_
}

void EvaluationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvaluationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .robogenMessage.Robot robot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_robot(), output);
  }

  // required .robogenMessage.SimulatorConf configuration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_configuration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvaluationRequest)
}

::google::protobuf::uint8* EvaluationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvaluationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .robogenMessage.Robot robot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_robot(), deterministic, target);
  }

  // required .robogenMessage.SimulatorConf configuration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_configuration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvaluationRequest)
  return target;
}

size_t EvaluationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.EvaluationRequest)
  size_t total_size = 0;

  if (has_robot()) {
    // required .robogenMessage.Robot robot = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_);
  }

  if (has_configuration()) {
    // required .robogenMessage.SimulatorConf configuration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  return total_size;
}
size_t EvaluationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.EvaluationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .robogenMessage.Robot robot = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_);

    // required .robogenMessage.SimulatorConf configuration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *configuration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.EvaluationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EvaluationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.EvaluationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.EvaluationRequest)
    MergeFrom(*source);
  }
}

void EvaluationRequest::MergeFrom(const EvaluationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.EvaluationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_robot()->::robogenMessage::Robot::MergeFrom(from.robot());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_configuration()->::robogenMessage::SimulatorConf::MergeFrom(from.configuration());
    }
  }
}

void EvaluationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.EvaluationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationRequest::CopyFrom(const EvaluationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.EvaluationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_robot()) {
    if (!this->robot_->IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration_->IsInitialized()) return false;
  }
  return true;
}

void EvaluationRequest::Swap(EvaluationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluationRequest::InternalSwap(EvaluationRequest* other) {
  using std::swap;
  swap(robot_, other->robot_);
  swap(configuration_, other->configuration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EvaluationRequest::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EvaluationResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluationResult::kIdFieldNumber;
const int EvaluationResult::kFitnessFieldNumber;
const int EvaluationResult::kObjectivesFieldNumber;
const int EvaluationResult::kEndPosXFieldNumber;
const int EvaluationResult::kEndPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluationResult::EvaluationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robogen_2eproto::scc_info_EvaluationResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvaluationResult)
}
EvaluationResult::EvaluationResult(const EvaluationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      objectives_(from.objectives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&endposy_) -
    reinterpret_cast<char*>(&id_)) + sizeof(endposy_));
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvaluationResult)
}

void EvaluationResult::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endposy_) -
      reinterpret_cast<char*>(&id_)) + sizeof(endposy_));
}

EvaluationResult::~EvaluationResult() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvaluationResult)
  SharedDtor();
}

void EvaluationResult::SharedDtor() {
}

void EvaluationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EvaluationResult::descriptor() {
  ::protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvaluationResult& EvaluationResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robogen_2eproto::scc_info_EvaluationResult.base);
  return *internal_default_instance();
}


void EvaluationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.EvaluationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectives_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endposy_) -
        reinterpret_cast<char*>(&id_)) + sizeof(endposy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvaluationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvaluationResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float fitness = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_fitness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fitness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float objectives = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_objectives())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_objectives())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float endPosX = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_endposx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endposx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float endPosY = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_endposy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endposy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvaluationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvaluationResult)
  return false;
#undef DO_
}

void EvaluationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvaluationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float fitness = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fitness(), output);
  }

  // repeated float objectives = 3;
  for (int i = 0, n = this->objectives_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->objectives(i), output);
  }

  // required float endPosX = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->endposx(), output);
  }

  // required float endPosY = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->endposy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvaluationResult)
}

::google::protobuf::uint8* EvaluationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvaluationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float fitness = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fitness(), target);
  }

  // repeated float objectives = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->objectives_, target);

  // required float endPosX = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->endposx(), target);
  }

  // required float endPosY = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->endposy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvaluationResult)
  return target;
}

size_t EvaluationResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.EvaluationResult)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_fitness()) {
    // required float fitness = 2;
    total_size += 1 + 4;
  }

  if (has_endposx()) {
    // required float endPosX = 4;
    total_size += 1 + 4;
  }

  if (has_endposy()) {
    // required float endPosY = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t EvaluationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.EvaluationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float fitness = 2;
    total_size += 1 + 4;

    // required float endPosX = 4;
    total_size += 1 + 4;

    // required float endPosY = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float objectives = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->objectives_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->objectives_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.EvaluationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const EvaluationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.EvaluationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.EvaluationResult)
    MergeFrom(*source);
  }
}

void EvaluationResult::MergeFrom(const EvaluationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.EvaluationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectives_.MergeFrom(from.objectives_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fitness_ = from.fitness_;
    }
    if (cached_has_bits & 0x00000004u) {
      endposx_ = from.endposx_;
    }
    if (cached_has_bits & 0x00000008u) {
      endposy_ = from.endposy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvaluationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.EvaluationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationResult::CopyFrom(const EvaluationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.EvaluationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void EvaluationResult::Swap(EvaluationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluationResult::InternalSwap(EvaluationResult* other) {
  using std::swap;
  objectives_.InternalSwap(&other->objectives_);
  swap(id_, other->id_);
  swap(fitness_, other->fitness_);
  swap(endposx_, other->endposx_);
  swap(endposy_, other->endposy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EvaluationResult::GetMetadata() const {
  protobuf_robogen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robogen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robogenMessage
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::EvolvableParameter* Arena::CreateMaybeMessage< ::robogenMessage::EvolvableParameter >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::EvolvableParameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::BodyPart* Arena::CreateMaybeMessage< ::robogenMessage::BodyPart >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::BodyPart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::BodyConnection* Arena::CreateMaybeMessage< ::robogenMessage::BodyConnection >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::BodyConnection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::Body* Arena::CreateMaybeMessage< ::robogenMessage::Body >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::Body >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::NeuralConnection* Arena::CreateMaybeMessage< ::robogenMessage::NeuralConnection >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::NeuralConnection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::Neuron* Arena::CreateMaybeMessage< ::robogenMessage::Neuron >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::Neuron >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::Brain* Arena::CreateMaybeMessage< ::robogenMessage::Brain >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::Brain >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::Robot* Arena::CreateMaybeMessage< ::robogenMessage::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::Robot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::Obstacle* Arena::CreateMaybeMessage< ::robogenMessage::Obstacle >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::Obstacle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::LightSource* Arena::CreateMaybeMessage< ::robogenMessage::LightSource >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::LightSource >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::StartPosition* Arena::CreateMaybeMessage< ::robogenMessage::StartPosition >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::StartPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::SimulatorConf* Arena::CreateMaybeMessage< ::robogenMessage::SimulatorConf >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::SimulatorConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::EvaluationRequest* Arena::CreateMaybeMessage< ::robogenMessage::EvaluationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::EvaluationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robogenMessage::EvaluationResult* Arena::CreateMaybeMessage< ::robogenMessage::EvaluationResult >(Arena* arena) {
  return Arena::CreateInternal< ::robogenMessage::EvaluationResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
